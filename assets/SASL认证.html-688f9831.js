import{_ as t,r as p,o,c as l,f as s,h as a,a as i,d as n}from"./app-ac465cee.js";const c="/vuepress-lingdu-v2/assets/img-0c9b5319.png",r="/vuepress-lingdu-v2/assets/img_1-17af876d.png",u="/vuepress-lingdu-v2/assets/img_2-8de50c3b.png",k="/vuepress-lingdu-v2/assets/img_3-30bcfb07.png",d={},v=n('<h1 id="zookeeper和kafka的sasl认证以及生产实践" tabindex="-1"><a class="header-anchor" href="#zookeeper和kafka的sasl认证以及生产实践" aria-hidden="true">#</a> zookeeper和kafka的SASL认证以及生产实践</h1><div class="hint-container tip"><p class="hint-container-title">提示</p><p><strong>简介：</strong> 一、什么是zookeeper？ ZooKeeper是一个集中的服务，用于维护配置信息、命名、提供分布式同步以及提供组服务。所有这些类型的服务都以某种形式被分布式应用程序使用。每次它们被实现时，都有大量的工作需要去修复不可避免的bug和竞争条件。</p></div><h2 id="一、什么是zookeeper" tabindex="-1"><a class="header-anchor" href="#一、什么是zookeeper" aria-hidden="true">#</a> 一、什么是zookeeper？</h2><p>ZooKeeper是一个集中的服务，用于维护配置信息、命名、提供分布式同步以及提供组服务。所有这些类型的服务都以某种形式被分布式应用程序使用。每次它们被实现时，都有大量的工作需要去修复不可避免的bug和竞争条件。由于实现这类服务的困难，应用程序最初通常会略过它们，这使得它们在出现变化时变得脆弱，难以管理。即使做得正确，这些服务的不同实现在部署应用程序时也会导致管理复杂性。</p><p>总之：zookeeper是一种高可靠的分布式协调组件，主要用来解决分布式一致性和分布式锁、元数据/配置信息管理的问题。</p><h2 id="二、zookeeper的使用场景" tabindex="-1"><a class="header-anchor" href="#二、zookeeper的使用场景" aria-hidden="true">#</a> 二、zookeeper的使用场景</h2><ul><li><p>分布式协调：这个其实是zk很经典的一个用法，简单来说，就好比，你A系统发送个请求到mq，然后B消息消费之后处理了。那A系统如何知道B系统的处理结果？用zk就可以实现分布式系统之间的协调工作。A系统发送请求之后可以在zk上对某个节点的值注册个监听器，一旦B系统处理完了就修改zk那个节点的值，A立马就可以收到通知，完美解决。 <img src="'+c+'" alt="" loading="lazy"></p></li><li><p>分布式锁：对某一个数据连续发出两个修改操作，两台机器同时收到了请求，但是只能一台机器先执行另外一个机器再执行。那么此时就可以使用zk分布式锁，一个机器接收到了请求之后先获取zk上的一把分布式锁，就是可以去创建一个znode，接着执行操作；然后另外一个机器也尝试去创建那个znode，结果发现自己创建不了，因为被别人创建了,那只能等着，等第一个机器执行完了自己再执行。 <img src="'+r+'" alt="" loading="lazy"></p></li><li><p>元数据/配置信息管理：zk可以用作很多系统的配置信息的管理，比如kafka、storm、Doubbo等等很多分布式系统都会选用zk来做一些元数据、配置信息的管理 <img src="'+u+'" alt="" loading="lazy"></p></li></ul><h2 id="三、zookeeper节点有哪些特性-什么时候使用什么特性的节点" tabindex="-1"><a class="header-anchor" href="#三、zookeeper节点有哪些特性-什么时候使用什么特性的节点" aria-hidden="true">#</a> 三、zookeeper节点有哪些特性，什么时候使用什么特性的节点？</h2><p>在 ZooKeeper 中，节点类型可以分为持久节点（PERSISTENT ）、临时节点（EPHEMERAL），以及有序节点（SEQUENTIAL ），具体在节点创建过程中，一般是组合使用。</p><ul><li>持久节点：是指在节点创建后，就一直存在，直到有删除操作来主动清除这个节点——不会因为创建该节点的客户端会话失效而消失。</li><li>持久顺序节点：这类节点的基本特性和上面的节点类型是一致的。额外的特性是，在ZK中，每个父节点会为他的第一级子节点维护一份时序，会记录每个子节点创建的先后顺序。基于这个特性，在创建子节点的时候，可以设置这个属性，那么在创建节点过程中，ZK会自动为给定节点名加上一个数字后缀，作为新的节点名。这个数字后缀的范围是整型的最大值。</li><li>临时节点：与持久节点不同的是，临时节点的生命周期和客户端会话绑定。也就是说，如果客户端会话失效，那么这个节点就会自动被清除掉。注意，这里提到的是会话失效，而非连接断开。另外，在临时节点下面不能创建子节点。</li><li>事件监听：在读取数据时，我们可以同时对节点设置事件监听，当节点数据或结构变化时，zookeeper会通知客户端。当前zookeeper有如下四种事件：1)节点创建;2)节点删除;3)节点数据修改;4)子节点变更。</li></ul><h2 id="四、使用zookeeper实现服务注册中心-原理是什么-用到了zk的哪些特性" tabindex="-1"><a class="header-anchor" href="#四、使用zookeeper实现服务注册中心-原理是什么-用到了zk的哪些特性" aria-hidden="true">#</a> 四、使用zookeeper实现服务注册中心，原理是什么？用到了zk的哪些特性？</h2><p>zookeeper可以充当一个服务注册表（Service Registry），让多个服务提供者形成一个集群，让服务消费者通过服务注册表获取具体的服务访问地址（ip+端口）去访问具体的服务提供者。具体来说，zookeeper就是个分布式文件系统，每当一个服务提供者部署后都要将自己的服务注册到zookeeper的某一路径上,每当一个服务启动后会将自己的服务名称、IP等信息注册到zookeeper的ZNode上。 <img src="'+k+'" alt="" loading="lazy"></p><p>服务调用者第一次请求过来的时候会返回集群的IP地址的集合并注册一个服务的监听，然后在前端通过负载均衡算法(随机，轮询，加权轮询，最小连接数，hash)将对应的请求发到对应的设备上，而zookeeper和服务提供者之间会存在一个心跳机制，定时发送一个数据包来检查该服务器的状态，当接收不到数据包时，则会将该设备注册的相对应的服务进行删除，然后会push到服务调用者将对应的ip进行删除防止后续请求转发到已经宕掉的服务器上。</p><p>使用了数据节点持久化，事件监听的特性，分布式一致性特性</p><h2 id="五、zookeeper集群搭建" tabindex="-1"><a class="header-anchor" href="#五、zookeeper集群搭建" aria-hidden="true">#</a> 五、zookeeper集群搭建</h2>',15),m={href:"https://zhupei.blog.csdn.net/article/details/51517460",title:"https://zhupei.blog.csdn.net/article/details/51517460",target:"_blank",rel:"noopener noreferrer"},b=n(`<p>下面是搭建生产环境的步骤：</p><p>准备3台服务器，例如node1、node2、node3，首先进入node1中</p><ol><li>下载zk3.5版本的，http://www.apache.org/dyn/closer.cgi/zookeeper/</li><li>解压到相应目录,并在目录下新建dataDir文件夹</li><li>在conf目录在做配置：先拷贝一份 zoo_sample.cfg为zoo.cfg，然后编辑zoo.cfg：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">tickTime</span><span class="token operator">=</span><span class="token number">2000</span>
<span class="token assign-left variable">initLimit</span><span class="token operator">=</span><span class="token number">10</span>
<span class="token assign-left variable">syncLimit</span><span class="token operator">=</span><span class="token number">5</span>
<span class="token assign-left variable">dataDir</span><span class="token operator">=</span>/mnt/tools/zookeeper/apache-zookeeper-3.5.5/dataDir/
<span class="token assign-left variable">clientPort</span><span class="token operator">=</span><span class="token number">2181</span>
<span class="token assign-left variable">server.1</span><span class="token operator">=</span><span class="token number">0.0</span>.0.0:2888:3888
<span class="token assign-left variable">server.2</span><span class="token operator">=</span>node2:2888:3888
<span class="token assign-left variable">server.3</span><span class="token operator">=</span>node3:2888:3888
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里注意，node2、node3替换为真实服务器的ip地址，其中在node1中，这个ip地址要设置为0.0.0.0，不然肯会出现Cannot open channel to 1 at election address /xx.xx.xx.xx:3888的错误，特别是在真实的云服务器上面很容易出现这个问题。</p><ol start="4"><li>参照前面3步，分别在node2,node3机器上面进行配置，在node2中cong文件就修改为：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">server.1</span><span class="token operator">=</span>node1:2888:3888
<span class="token assign-left variable">server.2</span><span class="token operator">=</span><span class="token number">0.0</span>.0.0:2888:3888
<span class="token assign-left variable">server.3</span><span class="token operator">=</span>node3:2888:3888
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>在node3中cong文件就修改为：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">server.1</span><span class="token operator">=</span>node1:2888:3888
<span class="token assign-left variable">server.2</span><span class="token operator">=</span>node2:2888:3888
<span class="token assign-left variable">server.3</span><span class="token operator">=</span><span class="token number">0.0</span>.0.0:2888:3888
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>启动，分别在3个节点执行进行启动</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>bin/zkServer.sh  start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="7"><li>查看状态，可以看到3个节点随机有是1个master和2个follow</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token variable"><span class="token variable">\`</span>bin/zkServer.sh  status<span class="token variable">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="六、kafka集群搭建" tabindex="-1"><a class="header-anchor" href="#六、kafka集群搭建" aria-hidden="true">#</a> 六、kafka集群搭建</h2><p>因为本文主要讲zookeeper，所以对于kafka的搭建的就简易的说一下。这里提到kafka是因为下面要讲到到zookeeper和kafka的SASL机制认证。 安装kafka集群之前，确保zookeeper服务已经正常运行。准备3台服务器，例如node1、node2、node3，首先进入node1中</p><ol><li>下载kafka,地址 http://kafka.apache.org/downloads</li><li>解压到相应目录，并在安装目录下新建logs目录</li><li>编辑config中的server.properties文件，注意这里的broker.id，部署在不同机器上面的id需要不同，例如在node1中部署，这里就填写1，在node2机器上面就填写2，依次类推。</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">broker.id</span><span class="token operator">=</span><span class="token number">1</span>
<span class="token assign-left variable">listeners</span><span class="token operator">=</span>SASL_PLAINTEXT://0.0.0.0:9092
<span class="token assign-left variable">log.dirs</span><span class="token operator">=</span>/mnt/tools/kafka/kafka_2.12/logs
<span class="token assign-left variable">num.partitions</span><span class="token operator">=</span><span class="token number">3</span>
<span class="token assign-left variable">zookeeper.connect</span><span class="token operator">=</span>node1:2181,node2:2181,node3:2181
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>以上设置都完毕，保存配置并退出，然后将kafka目录发送至其他主机</li><li>在各个节点上启动</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>bin/kafka-server-start.sh <span class="token parameter variable">-daemon</span> config/server.properties
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="6"><li>通过jps可以看到有kafka的进程以及查看日志都正常的话就表示启动成功了</li></ol><h2 id="七、zookeeper和kafka的安全认证机制sasl" tabindex="-1"><a class="header-anchor" href="#七、zookeeper和kafka的安全认证机制sasl" aria-hidden="true">#</a> 七、zookeeper和kafka的安全认证机制SASL</h2><p>zookeeper在生产环境中，如果不是只在内网开放的话，就需要设置安全认证，可以选择SASL的安全认证。以下是和kafka的联合配置，如果不需要kafka可以去掉kafka相关的权限即可，以下基于zk3.5.5和kafka2.12进行操作。 下面就是详细的部署步骤：</p><h3 id="_7-1-zookeeper的安全认证配置" tabindex="-1"><a class="header-anchor" href="#_7-1-zookeeper的安全认证配置" aria-hidden="true">#</a> 7.1 zookeeper的安全认证配置</h3><p>zookeeper所有节点都是对等的，只是各个节点角色可能不相同。以下步骤所有的节点配置相同。</p><ol><li>导入kafka的相关jar<br> 从kafka/lib目录下复制以下几个jar包到zookeeper的lib目录下：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kafka-clients-2.3.0.jar
lz4-java-1.6.0.jar
slf4j-api-1.7.25.jar
slf4j-log4j12-1.7.25.jar
snappy-java-1.1.7.3.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>zoo.cfg文件配置 添加如下配置：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">authProvider.1</span><span class="token operator">=</span>org.apache.zookeeper.server.auth.SASLAuthenticationProvider
<span class="token assign-left variable">requireClientAuthScheme</span><span class="token operator">=</span>sasl
<span class="token assign-left variable">jaasLoginRenew</span><span class="token operator">=</span><span class="token number">3600000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>编写JAAS文件，zk_server_jaas.conf，放置在conf目录下<br> 这个文件定义需要链接到Zookeeper服务器的用户名和密码。JAAS配置节默认为Server：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Server <span class="token punctuation">{</span>
org.apache.kafka.common.security.plain.PlainLoginModule required 
    <span class="token assign-left variable">username</span><span class="token operator">=</span><span class="token string">&quot;admin&quot;</span> 
    <span class="token assign-left variable">password</span><span class="token operator">=</span><span class="token string">&quot;admin-2019&quot;</span> 
    <span class="token assign-left variable">user_kafka</span><span class="token operator">=</span><span class="token string">&quot;kafka-2019&quot;</span> 
    <span class="token assign-left variable">user_producer</span><span class="token operator">=</span><span class="token string">&quot;prod-2019&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个文件中定义了两个用户，一个是kafka，一个是producer，这些用user_配置出来的用户都可以提供给生产者程序和消费者程序认证使用。还有两个属性，username和password，其中username是配置Zookeeper节点之间内部认证的用户名，password是对应的密码。</p><ol start="4"><li>修改zkEnv.sh<br> 在zkEnv.sh添加以下内容，路径按你直接的实际路径来填写：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">SERVER_JVMFLAGS</span><span class="token operator">=</span><span class="token string">&quot; -Djava.security.auth.login.config=/mnt/tools/zookeeper/apache-zookeeper-3.5.5/conf/zk_server_jaas.conf &quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li>在各个节点分别执行bin/zkServer.sh start启动zk。如果启动异常查看日志排查问题。</li></ol><h3 id="_7-2-kafka的安全认证配置" tabindex="-1"><a class="header-anchor" href="#_7-2-kafka的安全认证配置" aria-hidden="true">#</a> 7.2 kafka的安全认证配置</h3><p>zookeeper启动之后，就配置kafka,下面步骤的配置在所有节点上都相同。</p><ol><li>在kafka的config目录下，新建kafka_server_jaas.conf文件，内容如下：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>KafkaServer <span class="token punctuation">{</span>
      org.apache.kafka.common.security.plain.PlainLoginModule required
    <span class="token assign-left variable">username</span><span class="token operator">=</span><span class="token string">&quot;admin&quot;</span>
    <span class="token assign-left variable">password</span><span class="token operator">=</span><span class="token string">&quot;admin-2019&quot;</span>
    <span class="token assign-left variable">user_admin</span><span class="token operator">=</span><span class="token string">&quot;admin-2019&quot;</span>
    <span class="token assign-left variable">user_producer</span><span class="token operator">=</span><span class="token string">&quot;prod-2019&quot;</span>
    <span class="token assign-left variable">user_consumer</span><span class="token operator">=</span><span class="token string">&quot;cons-2019&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

Client <span class="token punctuation">{</span>
  org.apache.kafka.common.security.plain.PlainLoginModule required
    <span class="token assign-left variable">username</span><span class="token operator">=</span><span class="token string">&quot;kafka&quot;</span>
    <span class="token assign-left variable">password</span><span class="token operator">=</span><span class="token string">&quot;kafka-2019&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>KafkaServer配置的是kafka的账号和密码，Client配置节主要配置了broker到Zookeeper的链接用户名密码，这里要和前面zookeeper配置中的zk_server_jaas.conf中user_kafka的账号和密码相同。</p><ol start="2"><li>配置server.properties，同样的在config目录下</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">listeners</span><span class="token operator">=</span>SASL_PLAINTEXT://0.0.0.0:9092
<span class="token assign-left variable">advertised.listeners</span><span class="token operator">=</span>SASL_PLAINTEXT://node1:9092
<span class="token assign-left variable">security.inter.broker.protocol</span><span class="token operator">=</span>SASL_PLAINTEXT  
<span class="token assign-left variable">sasl.enabled.mechanisms</span><span class="token operator">=</span>PLAIN  
<span class="token assign-left variable">sasl.mechanism.inter.broker.protocol</span><span class="token operator">=</span>PLAIN  
<span class="token assign-left variable">authorizer.class.name</span><span class="token operator">=</span>kafka.security.auth.SimpleAclAuthorizer
<span class="token assign-left variable">allow.everyone.if.no.acl.found</span><span class="token operator">=</span>true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>kafka3.0之后版本弃用了SimpleAclAuthorizer验证，改为kafka.security.authorizer.AclAuthorizer</p></div><p>这里注意listeners配置项，将主机名部分（本例主机名是node1）替换成当前节点的主机名。其他在各个节点的配置一致。注意，allow.everyone.if.no.acl.found这个配置项默认是false，若不配置成true，后续生产者、消费者无法正常使用Kafka。</p><ol start="3"><li>在server启动脚本JVM参数,在bin目录下的kafka-server-start.sh中，将</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">KAFKA_HEAP_OPTS</span><span class="token operator">=</span><span class="token string">&quot;-Xmx1G -Xms1G&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这一行修改为</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">KAFKA_HEAP_OPTS</span><span class="token operator">=</span><span class="token string">&quot;-Xmx1G -Xms1G -Djava.security.auth.login.config=/mnt/tools/kafka/kafka_2.12/config/kafka_server_jaas.conf&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li><p>配置其他节点 配置剩余的kafka broker节点，注意server.properties的listeners配置项</p></li><li><p>启动各个节点的kafka服务端，在bin目录下执行</p></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./kafka-server-start.sh <span class="token punctuation">..</span>/config/server.properties
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="八、springboot中使用kafka" tabindex="-1"><a class="header-anchor" href="#八、springboot中使用kafka" aria-hidden="true">#</a> 八、springboot中使用kafka</h2><p>在springboot项目中，注意：如果在springboot1.x的版本中报错，请升级为speingboot2.x的版本，本例使用的是2.1.1.RELEASE</p><ol><li>新建sprinboot工程，添加pom依赖，设置parent为2.1.1.RELEASE,这样就不需要在dependency中添加版本号了</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>在resource下新建文件kafka_client_jaas.conf，内容如下：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>KafkaClient <span class="token punctuation">{</span>
     org.apache.kafka.common.security.plain.PlainLoginModule required
    <span class="token assign-left variable">username</span><span class="token operator">=</span><span class="token string">&quot;admin&quot;</span>
    <span class="token assign-left variable">password</span><span class="token operator">=</span><span class="token string">&quot;admin-2019&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个用户名和密码要和前面kafka中使用的账号密码相同，这样才能有访问权限</p><ol start="3"><li>在application.yml文件配置,注意这里将node1,2,3替换为你真实的服务器地址</li></ol><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">kafka</span><span class="token punctuation">:</span>
    <span class="token key atrule">listener</span><span class="token punctuation">:</span>
      <span class="token key atrule">batch-listener</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>                                <span class="token comment">#是否开启批量消费，true表示批量消费</span>
      <span class="token key atrule">concurrency</span><span class="token punctuation">:</span> <span class="token number">10</span>                                      <span class="token comment">#设置消费的线程数</span>
      <span class="token key atrule">poll-timeout</span><span class="token punctuation">:</span> <span class="token number">1500</span>                                  <span class="token comment">#自动提交设置，如果消息队列中没有消息，等待timeout毫秒后，调用poll()方法。如果队列中有消息，立即消费消息，每次消费的消息的多少可以通过max.poll.records配置。</span>
    <span class="token key atrule">template</span><span class="token punctuation">:</span>
      <span class="token key atrule">default-topic</span><span class="token punctuation">:</span> probe2
    <span class="token key atrule">producer</span><span class="token punctuation">:</span>
      <span class="token key atrule">bootstrap-servers</span><span class="token punctuation">:</span> node1<span class="token punctuation">:</span><span class="token number">9092</span><span class="token punctuation">,</span>node2<span class="token punctuation">,</span>node3<span class="token punctuation">:</span><span class="token number">9092</span>
      <span class="token key atrule">key-deserializer</span><span class="token punctuation">:</span> org.apache.kafka.common.serialization.StringDeserializer
      <span class="token key atrule">value-deserializer</span><span class="token punctuation">:</span> org.apache.kafka.common.serialization.StringDeserializer
      <span class="token key atrule">properties</span><span class="token punctuation">:</span> 
        <span class="token key atrule">sasl.mechanism</span><span class="token punctuation">:</span> PLAIN
        <span class="token key atrule">security.protocol</span><span class="token punctuation">:</span> SASL_PLAINTEXT      
    <span class="token key atrule">consumer</span><span class="token punctuation">:</span> 
      <span class="token key atrule">bootstrap-servers</span><span class="token punctuation">:</span> node1<span class="token punctuation">:</span><span class="token number">9092</span><span class="token punctuation">,</span>node2<span class="token punctuation">:</span><span class="token number">9092</span><span class="token punctuation">,</span>node3<span class="token punctuation">:</span><span class="token number">9092</span>
      <span class="token key atrule">group-id</span><span class="token punctuation">:</span> group<span class="token punctuation">-</span><span class="token number">2</span>
      <span class="token key atrule">key-deserializer</span><span class="token punctuation">:</span> org.apache.kafka.common.serialization.StringDeserializer
      <span class="token key atrule">value-deserializer</span><span class="token punctuation">:</span> org.apache.kafka.common.serialization.StringDeserializer
      <span class="token key atrule">properties</span><span class="token punctuation">:</span> 
        <span class="token key atrule">sasl.mechanism</span><span class="token punctuation">:</span> PLAIN
        <span class="token key atrule">security.protocol</span><span class="token punctuation">:</span> SASL_PLAINTEXT
      <span class="token key atrule">auto</span><span class="token punctuation">:</span>
        <span class="token key atrule">offset</span><span class="token punctuation">:</span> 
            <span class="token key atrule">reset</span><span class="token punctuation">:</span> latest
      <span class="token key atrule">enable</span><span class="token punctuation">:</span>
        <span class="token key atrule">auto</span><span class="token punctuation">:</span> 
          <span class="token key atrule">commit</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里开启了消费者10个线程，这里可以根据你实际业务来调整消费者的数量</p><ol start="4"><li>程序启动类：</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProbeApplication</span> <span class="token punctuation">{</span>
    
    <span class="token comment">//初始化系统属性</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token class-name">ClassLoader</span> loader <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;java.security.auth.login.config&quot;</span><span class="token punctuation">,</span> 
                loader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token class-name">File</span><span class="token punctuation">.</span>separator<span class="token operator">+</span><span class="token string">&quot;kafka_client_jaas.conf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ProbeApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>生产者：</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sender</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> <span class="token constant">LOG</span> <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Sender</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">KafkaTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> template<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ListenableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SendResult</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>template<span class="token punctuation">.</span><span class="token function">sendDefault</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        future<span class="token punctuation">.</span><span class="token function">addCallback</span><span class="token punctuation">(</span>success <span class="token operator">-&gt;</span> <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;KafkaMessageProducer 发送消息成功！消息内容是:&quot;</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">,</span>
                fail <span class="token operator">-&gt;</span> <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;KafkaMessageProducer 发送消息失败！消息内容是:&quot;</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>消费者，将生产者发过来的消息进行处理</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Receiver</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token string">&quot;probe2&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveMessage</span><span class="token punctuation">(</span><span class="token class-name">ConsumerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;【*** 消费者开始接收消息 ***】key = &quot;</span> <span class="token operator">+</span> record<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;、value = &quot;</span> <span class="token operator">+</span> record<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token comment">//TODO，在这里进行自己的业务操作，例如入库</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7"><li>controller</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">Sender</span> sender<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/send/{msg}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> msg<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="8"><li>启动springboot工程，然后访问相应的地址即可得到想要的结果</li></ol><p>如果生产者的速度大于消费者的速度，可以适当调整生产者和消费者的数量来处理，同时不要在消费者进行太过于耗时的操作。</p><h2 id="九、总结" tabindex="-1"><a class="header-anchor" href="#九、总结" aria-hidden="true">#</a> 九、总结</h2><p>本文主要分享了zookeeper的应用场景和节点特性、注册原理、zookeeper集群搭建和kafka集群搭建、zookeeper和kafka的SASL认证机制、在springboot中实操基于SASL认证的kafka。</p>`,71);function g(h,f){const e=p("ExternalLinkIcon");return o(),l("div",null,[v,s("p",null,[a("多年之前我写了一篇简易的zookeeper入门教程，如果是搭建伪集群的话可以参考以上这篇文章，地址："),s("a",m,[a("https://zhupei.blog.csdn.net/article/details/51517460 "),i(e)])]),b])}const y=t(d,[["render",g],["__file","SASL认证.html.vue"]]);export{y as default};
