import{_ as n,o as s,c as a,d as t}from"./app-ac465cee.js";const p={},e=t(`<h1 id="延时双删" tabindex="-1"><a class="header-anchor" href="#延时双删" aria-hidden="true">#</a> 延时双删</h1><h2 id="一、什么是-redis-延时双删" tabindex="-1"><a class="header-anchor" href="#一、什么是-redis-延时双删" aria-hidden="true">#</a> 一、什么是 Redis 延时双删？</h2><p>1、延迟双删策略是分布式系统中数据库存储和缓存数据保持一致性的常用策略，但它不是强一致。不管哪种方案，都无法绝对避免Redis存在脏数据的问题，只能减轻这个问题</p><p>2、因为双删策略执行的结果是把redis中保存的那条数据删除了，以后的查询就都会去查询数据库。经常修改的数据表不适合使用redis缓存</p><p>3、Redis适用的是读频率远远大于改频率的数据表，不适合改频率大于读频率的数据</p><h2 id="二、为什么要使用延时双删" tabindex="-1"><a class="header-anchor" href="#二、为什么要使用延时双删" aria-hidden="true">#</a> 二、为什么要使用延时双删？</h2><p>先看下面两种脏数据情况：</p><p>1、情况一：先删除缓存数据，再update更新数据表</p><p>当请求1执行删除缓存数据后，还未来得及更新数据表或更新动作还未完成，此时请求2查询到数据表中仍然是更新之前的数据、并把脏数据写入了Redis缓存</p><p>2、情况二：先update更新数据表，再删除缓存数据</p><p>当请求1执行update更新数据表后，还未来得及删除缓存数据或删除缓存动作还未完成，此时请求2查询到Redis缓存中仍然是旧数据、并返回给前端</p><p>为了避免上述的两种情况数据不一致问题，就需要用到我们介绍的延时双删策略：先删除缓存数据 》再执行update更新数据表 》最后（延时N秒）执行删除缓存</p><h2 id="三、实现延时双删-示例" tabindex="-1"><a class="header-anchor" href="#三、实现延时双删-示例" aria-hidden="true">#</a> 三、实现延时双删，示例：</h2><p>1、有实现注释，代码如下</p><p>更新操作代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInfoServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserInfoMapper</span><span class="token punctuation">,</span> <span class="token class-name">UserInfo</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">UserInfoService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">RedisUtil</span> redisUtil<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">ScheduledExecutorService</span> scheduledExecutorService<span class="token punctuation">;</span>


    <span class="token doc-comment comment">/**
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>保存用户信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
     *
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveUserInfo</span><span class="token punctuation">(</span><span class="token class-name">UserInfo</span> userInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//Hash方式 start</span>
            redisUtil<span class="token punctuation">.</span><span class="token function">putHash</span><span class="token punctuation">(</span><span class="token class-name">RedisConstants</span><span class="token punctuation">.</span><span class="token constant">USER_INFO_HASH</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//Hash方式 end</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">//测试Redis延时双删，Hash方式 start</span>
            <span class="token comment">//1、删除缓存数据</span>
            <span class="token class-name">UserInfo</span> getUserInfoResFirst <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>getUserInfoResFirst<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>obj <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                redisUtil<span class="token punctuation">.</span><span class="token function">deleteHash</span><span class="token punctuation">(</span><span class="token class-name">RedisConstants</span><span class="token punctuation">.</span><span class="token constant">USER_INFO_HASH</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//2、更新数据表</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//3、延时2秒后，再删除缓存数据</span>
            scheduledExecutorService<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>getUserInfoResFirst<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>obj <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    redisUtil<span class="token punctuation">.</span><span class="token function">deleteHash</span><span class="token punctuation">(</span><span class="token class-name">RedisConstants</span><span class="token punctuation">.</span><span class="token constant">USER_INFO_HASH</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//测试Redis延时双删，Hash方式 end</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询操作代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;根据用户Id查询用户详情信息&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;用户Id&quot;</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">&quot;userId&quot;</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/getUserInfoById&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserInfo</span><span class="token punctuation">&gt;</span></span> <span class="token function">getUserInfoById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//Hash方式 start</span>
    <span class="token class-name">Object</span> userInfoObj <span class="token operator">=</span> redisUtil<span class="token punctuation">.</span><span class="token function">getHash</span><span class="token punctuation">(</span><span class="token class-name">RedisConstants</span><span class="token punctuation">.</span><span class="token constant">USER_INFO_HASH</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span>userInfoObj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">success</span><span class="token punctuation">(</span>userInfoObj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">UserInfo</span> userInfo <span class="token operator">=</span> userInfoService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>obj <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        redisUtil<span class="token punctuation">.</span><span class="token function">putHash</span><span class="token punctuation">(</span><span class="token class-name">RedisConstants</span><span class="token punctuation">.</span><span class="token constant">USER_INFO_HASH</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//Hash方式 end</span>
    <span class="token keyword">return</span> <span class="token function">success</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：</p><p>以上就是实现缓存和数据表一致的延时双删策略Demo，经过测试可以保持数据一致</p><h2 id="四、小结" tabindex="-1"><a class="header-anchor" href="#四、小结" aria-hidden="true">#</a> 四、小结</h2><p>1、使用延时双删策略是为了保持Redis缓存与数据表一致</p><p>2、第一次删除不再赘述，为了清除缓存中的旧数据</p><p>3、主要是第二次删除，第二次删除为什么要延时呢？延时1是为了等待更新数据表动作完成、2是为了等待更新数据表之前查询查到的旧数据写入缓存动作完成，最后再把写入缓存的旧数据删除</p><p>4、延时双删依然无法保证一致，只能减轻出现脏数据的情况，所以对一致性要求较高的数据尽量不要放入缓存</p>`,25),c=[e];function o(l,u){return s(),a("div",null,c)}const k=n(p,[["render",o],["__file","延时双删.html.vue"]]);export{k as default};
