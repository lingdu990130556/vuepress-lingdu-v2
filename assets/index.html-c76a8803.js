import{_ as a,o as i,c as e,d as l}from"./app-ac465cee.js";const r={},h=l('<h1 id="java基础" tabindex="-1"><a class="header-anchor" href="#java基础" aria-hidden="true">#</a> Java基础</h1><h2 id="java语言具有哪些特点" tabindex="-1"><a class="header-anchor" href="#java语言具有哪些特点" aria-hidden="true">#</a> Java语言具有哪些特点？</h2><ol><li>Java为纯面向对象的语言。它能够直接反应现实生活中的对象。</li><li>具有平台无关性。java利用Java虚拟机运行字节码，无论是在Windows、Linux还是MacOS等其它平台对Java程序进行编译，编译后的程序可在其它平台运行。</li><li>Java为解释型语言，编译器把Java代码编译成平台无关的中间代码，然后在JVM上解释运行，具有很好的可移植性。</li><li>Java提供了很多内置类库。如对多线程支持，对网络通信支持，最重要的一点是提供了垃圾回收器。</li><li>Java具有较好的安全性和健壮性。Java提供了异常处理和垃圾回收机制，去除了C++中难以理解的指针特性。</li><li>Java语言提供了对Web应用开发的支持。</li></ol><h2 id="面向对象的三大特性" tabindex="-1"><a class="header-anchor" href="#面向对象的三大特性" aria-hidden="true">#</a> 面向对象的三大特性？</h2><ol><li><p>继承：对象的一个新类可以从现有的类中派生，派生类可以从它的基类那继承方法和实例变量，且派生类可以修改或新增新的方法使之更适合特殊的需求。</p></li><li><p>封装：将客观事物抽象成类，每个类可以把自身数据和方法只让可信的类或对象操作，对不可信的进行信息隐藏。</p></li><li><p>多态：允许不同类的对象对同一消息作出响应。不同对象调用相同方法即使参数也相同，最终表现行为是不一样的。</p></li></ol><h2 id="字节序定义以及java属于哪种字节序" tabindex="-1"><a class="header-anchor" href="#字节序定义以及java属于哪种字节序" aria-hidden="true">#</a> 字节序定义以及Java属于哪种字节序？</h2><p>字节序是指多字节数据在计算机内存中存储或网络传输时个字节的存储顺序。通常由小端和大端两组方式。</p><ol><li>小端:低位字节存放在内存的低地址端，高位字节存放在内存的高地址端。</li><li>大端：高位字节存放在内存的低地址端，低位字节存放在内存的高地址端。</li></ol><p>Java语言的字节序是大端。</p><h2 id="jdk与jre有什么区别" tabindex="-1"><a class="header-anchor" href="#jdk与jre有什么区别" aria-hidden="true">#</a> JDK与JRE有什么区别？</h2><ol><li>JDK：Java开发工具包（Java Development Kit），提供了Java的开发环境和运行环境。</li><li>JRE：Java运行环境(Java Runtime Environment)，提供了Java运行所需的环境。</li></ol><p>JDK包含了JRE。如果只运行Java程序，安装JRE即可。要编写Java程序需安装JDK.</p><h2 id="简述java访问修饰符" tabindex="-1"><a class="header-anchor" href="#简述java访问修饰符" aria-hidden="true">#</a> 简述Java访问修饰符</h2><ul><li>default: 默认访问修饰符，在同一包内可见</li><li>private: 在同一类内可见，不能修饰类</li><li>protected : 对同一包内的类和所有子类可见，不能修饰类</li><li>public: 对所有类可见</li></ul><h2 id="构造方法、成员变量初始化以及静态成员变量三者的初始化顺序" tabindex="-1"><a class="header-anchor" href="#构造方法、成员变量初始化以及静态成员变量三者的初始化顺序" aria-hidden="true">#</a> 构造方法、成员变量初始化以及静态成员变量三者的初始化顺序？</h2><p>先后顺序：静态成员变量、成员变量、构造方法。 详细的先后顺序：父类静态变量、父类静态代码块、子类静态变量、子类静态代码块、父类非静态变量、父类非静态代码块、父类构造函数、子类非静态变量、子类非静态代码块、子类构造函数。</p><h2 id="接口和抽象类的相同点和区别" tabindex="-1"><a class="header-anchor" href="#接口和抽象类的相同点和区别" aria-hidden="true">#</a> 接口和抽象类的相同点和区别？</h2><p>相同点:</p><ol><li>都不能被实例化。</li><li>接口的实现类或抽象类的子类需实现接口或抽象类中相应的方法才能被实例化。</li></ol><p>不同点：</p><ol><li><p>接口只能有方法定义，不能有方法的实现，而抽象类可以有方法的定义与实现。</p></li><li><p>实现接口的关键字为implements,继承抽象类的关键字为extends。一个类可以实现多个接口，只能继承一个抽象类。</p></li><li><p>当子类和父类之间存在逻辑上的层次结构，推荐使用抽象类，有利于功能的累积。当功能不需要，希望支持差别较大的两个或更多对象间的特定交互行为，推荐使用接口。使用接口能降低软件系统的耦合度，便于日后维护或添加删除方法。</p></li></ol><h2 id="为什么java语言不支持多重继承" tabindex="-1"><a class="header-anchor" href="#为什么java语言不支持多重继承" aria-hidden="true">#</a> 为什么Java语言不支持多重继承？</h2><ol><li>为了程序的结构能够更加清晰从而便于维护。假设Java语言支持多重继承，类C继承自类A和类B,如果类A和B都有自定义的成员方法f(),那么当代码中调用类C的f()会产生二义性。Java语言通过实现多个接口间接支持多重继承，接口由于只包含方法定义，不能有方法的实现，类C继承接口A与接口B时即使它们都有方法f(),也不能直接调用方法，需实现具体的f()方法才能调用，不会产生二义性。</li><li>多重继承会使类型转换、构造方法的调用顺序变得复杂，会影响到性能。</li></ol><h2 id="java提供的多态机制" tabindex="-1"><a class="header-anchor" href="#java提供的多态机制" aria-hidden="true">#</a> Java提供的多态机制？</h2><p>Java提供了两种用于多态的机制，分别是重载与覆盖。</p><ol><li>重载：重载是指同一个类中有多个同名的方法，但这些方法有不同的参数，在编译期间就可以确定调用哪个方法。</li><li>覆盖：覆盖是指派生类重写基类的方法，使用基类指向其子类的实例对象，或接口的引用变量指向其实现类的实例对象，在程序调用的运行期根据引用变量所指的具体实例对象调用正在运行的那个对象的方法，即需要到运行期才能确定调用哪个方法。</li></ol><h2 id="重载与覆盖的区别" tabindex="-1"><a class="header-anchor" href="#重载与覆盖的区别" aria-hidden="true">#</a> 重载与覆盖的区别？</h2><ol><li>覆盖是父类与子类之间的关系，是垂直关系；重载是同一类中方法之间的关系，是水平关系。</li><li>覆盖只能由一个方法或一对方法产生关系；重载是多个方法之间的关系。</li><li>覆盖要求参数列表相同；重载要求参数列表不同。</li><li>覆盖中，调用方法体是根据对象的类型来决定的，而重载是根据调用时实参表与形参表来对应选择方法体。</li><li>重载方法可以改变返回值的类型，覆盖方法不能改变返回值的类型。</li></ol><h2 id="final、finally和finalize的区别是什么" tabindex="-1"><a class="header-anchor" href="#final、finally和finalize的区别是什么" aria-hidden="true">#</a> final、finally和finalize的区别是什么？</h2><ol><li>final用于声明属性、方法和类，分别表示属性不可变、方法不可覆盖、类不可继承。</li><li>finally作为异常处理的一部分，只能在try/catch语句中使用，finally附带一个语句块用来表示这个语句最终一定被执行，经常被用在需要释放资源的情况下。</li><li>finalize是Object类的一个方法，在垃圾收集器执行的时候会调用被回收对象的finalize()方法。当垃圾回收器准备好释放对象占用空间时，首先会调用finalize()方法，并在下一次垃圾回收动作发生时真正回收对象占用的内存。</li></ol><h2 id="出现在java程序中的finally代码块是否一定会执行" tabindex="-1"><a class="header-anchor" href="#出现在java程序中的finally代码块是否一定会执行" aria-hidden="true">#</a> 出现在Java程序中的finally代码块是否一定会执行？</h2><p>当遇到下面情况不会执行。</p><ol><li>当程序在进入try语句块之前就出现异常时会直接结束。</li><li>当程序在try块中强制退出时，如使用System.exit(0)，也不会执行finally块中的代码。</li></ol><p>其它情况下，在try/catch/finally语句执行的时候，try块先执行，当有异常发生，catch和finally进行处理后程序就结束了，当没有异常发生，在执行完finally中的代码后，后面代码会继续执行。值得注意的是，当try/catch语句块中有return时，finally语句块中的代码会在return之前执行。如果try/catch/finally块中都有return语句，finally块中的return语句会覆盖try/catch模块中的return语句。</p><h2 id="java语言中关键字static的作用是什么" tabindex="-1"><a class="header-anchor" href="#java语言中关键字static的作用是什么" aria-hidden="true">#</a> Java语言中关键字static的作用是什么？</h2><p>static的主要作用有两个：</p><ol><li>为某种特定数据类型或对象分配与创建对象个数无关的单一的存储空间。</li><li>使得某个方法或属性与类而不是对象关联在一起，即在不创建对象的情况下可通过类直接调用方法或使用类的属性。</li></ol><p>具体而言static又可分为4种使用方式：</p><ol><li>修饰成员变量。用static关键字修饰的静态变量在内存中只有一个副本。只要静态变量所在的类被加载，这个静态变量就会被分配空间，可以使用&#39;&#39;类.静态变量&#39;&#39;和&#39;&#39;对象.静态变量&#39;&#39;的方法使用。</li><li>修饰成员方法。static修饰的方法无需创建对象就可以被调用。static方法中不能使用this和super关键字，不能调用非static方法，只能访问所属类的静态成员变量和静态成员方法。</li><li>修饰代码块。JVM在加载类的时候会执行static代码块。static代码块常用于初始化静态变量。static代码块只会被执行一次。</li><li>修饰内部类。static内部类可以不依赖外部类实例对象而被实例化。静态内部类不能与外部类有相同的名字，不能访问普通成员变量，只能访问外部类中的静态成员和静态成员方法。</li></ol><h2 id="java代码块执行顺序" tabindex="-1"><a class="header-anchor" href="#java代码块执行顺序" aria-hidden="true">#</a> Java代码块执行顺序</h2><ol><li>父类静态代码块（只执行一次）</li><li>子类静态代码块（只执行一次）</li><li>父类构造代码块</li><li>父类构造函数</li><li>子类构造代码块</li><li>子类构造函数</li><li>普通代码块</li></ol><h2 id="java中一维数组和二维数组的声明方式" tabindex="-1"><a class="header-anchor" href="#java中一维数组和二维数组的声明方式" aria-hidden="true">#</a> Java中一维数组和二维数组的声明方式？</h2><p>一维数组的声明方式：</p><ol><li>type arrayName[]</li><li>type[] arrayName</li></ol><p>二维数组的声明方式：</p><ol><li>type arrayName[][]</li><li>type[][] arrayName</li><li>type[] arrayName[]</li></ol><p>其中type为基本数据类型或类，arrayName为数组名字</p><h2 id="string和stringbuffer有什么区别" tabindex="-1"><a class="header-anchor" href="#string和stringbuffer有什么区别" aria-hidden="true">#</a> String和StringBuffer有什么区别？</h2><p>String用于字符串操作，属于不可变类。String对象一旦被创建，其值将不能被改变。而StringBuffer是可变类，当对象创建后，仍然可以对其值进行修改。</p><h2 id="判等运算符-与equals的区别" tabindex="-1"><a class="header-anchor" href="#判等运算符-与equals的区别" aria-hidden="true">#</a> 判等运算符==与equals的区别？</h2><p><strong>==</strong> 比较的是引用，equals比较的是内容。</p><ol><li><p>如果变量是基础数据类型，<strong>==</strong> 用于比较其对应值是否相等。如果变量指向的是对象,<strong>==</strong> 用于比较两个对象是否指向同一块存储空间。</p></li><li><p>equals是Object类提供的方法之一，每个Java类都继承自Object类，所以每个对象都具有equals这个方法。Object类中定义的equals方法内部是直接调用 <strong>==</strong> 比较对象的。但通过覆盖的方法可以让它不是比较引用而是比较数据内容。</p></li></ol><h2 id="为什么要把string设计为不变量" tabindex="-1"><a class="header-anchor" href="#为什么要把string设计为不变量" aria-hidden="true">#</a> 为什么要把String设计为不变量？</h2><ol><li>节省空间：字符串常量存储在JVM的字符串池中可以被用户共享。</li><li>提高效率:String会被不同线程共享，是线程安全的。在涉及多线程操作中不需要同步操作。</li><li>安全：String常被用于用户名、密码、文件名等使用，由于其不可变，可避免黑客行为对其恶意修改。</li></ol><h2 id="序列化是什么" tabindex="-1"><a class="header-anchor" href="#序列化是什么" aria-hidden="true">#</a> 序列化是什么？</h2><p>序列化是一种将对象转换成字节序列的过程，用于解决在对对象流进行读写操作时所引发的问题。序列化可以将对象的状态写在流里进行网络传输，或者保存到文件、数据库等系统里，并在需要的时候把该流读取出来重新构造成一个相同的对象。</p><h2 id="简述java中class对象" tabindex="-1"><a class="header-anchor" href="#简述java中class对象" aria-hidden="true">#</a> 简述Java中Class对象</h2><p>java中对象可以分为实例对象和Class对象，每一个类都有一个Class对象，其包含了与该类有关的信息。</p><p>获取Class对象的方法：</p><ul><li>Class.forName(“类的全限定名”)</li><li>实例对象.getClass()</li><li>类名.class</li></ul><h2 id="java反射机制是什么" tabindex="-1"><a class="header-anchor" href="#java反射机制是什么" aria-hidden="true">#</a> Java反射机制是什么？</h2><p>Java反射机制是指在程序的运行过程中可以构造任意一个类的对象、获取任意一个类的成员变量和成员方法、获取任意一个对象所属的类信息、调用任意一个对象的属性和方法。反射机制使得Java具有动态获取程序信息和动态调用对象方法的能力。可以通过以下类调用反射API。</p><ul><li>Class类：可获得类属性方法</li><li>Field类：获得类的成员变量</li><li>Method类：获取类的方法信息</li><li>Construct类：获取类的构造方法等信息</li></ul><h2 id="简述注解" tabindex="-1"><a class="header-anchor" href="#简述注解" aria-hidden="true">#</a> 简述注解</h2><p>Java 注解用于为 Java 代码提供元数据。作为元数据，注解不直接影响你的代码执行，但也有一些类型的注解实际上可以用于这一目的。</p><p>其可以用于提供信息给编译器，在编译阶段时给软件提供信息进行相关的处理，在运行时处理写相应代码，做对应操作。</p><h2 id="简述元注解" tabindex="-1"><a class="header-anchor" href="#简述元注解" aria-hidden="true">#</a> 简述元注解</h2><p>元注解可以理解为注解的注解，即在注解中使用，实现想要的功能。其具体分为：</p><ul><li>@Retention: 表示注解存在阶段是保留在源码，还是在字节码（类加载）或者运行期（JVM中运行）。</li><li>@Target：表示注解作用的范围。</li><li>@Documented：将注解中的元素包含到 Javadoc 中去。</li><li>@Inherited：一个被@Inherited注解了的注解修饰了一个父类，如果他的子类没有被其他注解修饰，则它的子类也继承了父类的注解。</li><li>@Repeatable：被这个元注解修饰的注解可以同时作用一个对象多次，但是每次作用注解又可以代表不同的含义。</li></ul><h2 id="简述java异常的分类" tabindex="-1"><a class="header-anchor" href="#简述java异常的分类" aria-hidden="true">#</a> 简述Java异常的分类</h2><p>Java异常分为Error（程序无法处理的错误），和Exception（程序本身可以处理的异常）。这两个类均继承Throwable。</p><p>Error常见的有StackOverFlowError,OutOfMemoryError等等。</p><p>Exception可分为运行时异常和非运行时异常。对于运行时异常，可以利用try catch的方式进行处理，也可以不处理。对于非运行时异常，必须处理，不处理的话程序无法通过编译。</p><h2 id="简述throw与throws的区别" tabindex="-1"><a class="header-anchor" href="#简述throw与throws的区别" aria-hidden="true">#</a> 简述throw与throws的区别</h2><p>throw一般是用在方法体的内部，由开发者定义当程序语句出现问题后主动抛出一个异常。</p><p>throws一般用于方法声明上，代表该方法可能会抛出的异常列表。</p><h2 id="简述泛型" tabindex="-1"><a class="header-anchor" href="#简述泛型" aria-hidden="true">#</a> 简述泛型</h2><p>泛型，即“参数化类型”，解决不确定对象具体类型的问题。在编译阶段有效。在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型在类中称为泛型类、接口中称为泛型接口和方法中称为泛型方法。</p><h2 id="简述泛型擦除" tabindex="-1"><a class="header-anchor" href="#简述泛型擦除" aria-hidden="true">#</a> 简述泛型擦除</h2><p>Java编译器生成的字节码是不包涵泛型信息的，泛型类型信息将在编译处理是被擦除，这个过程被称为泛型擦除。</p><h2 id="简述java基本数据类型" tabindex="-1"><a class="header-anchor" href="#简述java基本数据类型" aria-hidden="true">#</a> 简述Java基本数据类型</h2><ul><li>byte: 占用1个字节，取值范围-128 ~ 127</li><li>short: 占用2个字节，取值范围-2<sup>15</sup> ~ 2<sup>15</sup>-1</li><li>int：占用4个字节，取值范围-2<sup>31</sup> ~ 2<sup>31</sup>-1</li><li>long：占用8个字节</li><li>float：占用4个字节</li><li>double：占用8个字节</li><li>char: 占用2个字节</li><li>boolean：占用大小根据实现虚拟机不同有所差异</li></ul><h2 id="简述自动装箱拆箱" tabindex="-1"><a class="header-anchor" href="#简述自动装箱拆箱" aria-hidden="true">#</a> 简述自动装箱拆箱</h2><p>对于Java基本数据类型，均对应一个包装类。</p><p>装箱就是自动将基本数据类型转换为包装器类型，如int-&gt;Integer</p><p>拆箱就是自动将包装器类型转换为基本数据类型，如Integer-&gt;int</p><h2 id="简述重载与重写的区别" tabindex="-1"><a class="header-anchor" href="#简述重载与重写的区别" aria-hidden="true">#</a> 简述重载与重写的区别</h2><p>重写即子类重写父类的方法，方法对应的形参和返回值类型都不能变。</p><p>重载即在一个类中，方法名相同，参数类型或数量不同。</p><h2 id="简述java的多态" tabindex="-1"><a class="header-anchor" href="#简述java的多态" aria-hidden="true">#</a> 简述java的多态</h2><p>Java多态可以分为编译时多态和运行时多态。</p><p>编译时多态主要指方法的重载，即通过参数列表的不同来区分不同的方法。</p><p>运行时多态主要指继承父类和实现接口时，可使用父类引用指向子类对象。</p><p>运行时多态的实现：主要依靠方法表，方法表中最先存放的是Object类的方法，接下来是该类的父类的方法，最后是该类本身的方法。如果子类改写了父类的方法，那么子类和父类的那些同名方法共享一个方法表项，都被认作是父类的方法。因此可以实现运行时多态。</p><h2 id="简述抽象类与接口的区别" tabindex="-1"><a class="header-anchor" href="#简述抽象类与接口的区别" aria-hidden="true">#</a> 简述抽象类与接口的区别</h2><p>抽象类：体现的是is-a的关系，如对于man is a person，就可以将person定义为抽象类。</p><p>接口：体现的是can的关系。是作为模板实现的。如设置接口fly，plane类和bird类均可实现该接口。</p><p>一个类只能继承一个抽象类，但可以实现多个接口。</p><h2 id="简述-与equals方法的区别" tabindex="-1"><a class="header-anchor" href="#简述-与equals方法的区别" aria-hidden="true">#</a> 简述==与equals方法的区别</h2><p>对于==，在基本数据类型比较时，比较的是对应的值，对引用数据类型比较时，比较的是其内存的存放地址。</p><p>对于equals方法，在该方法未被重写时，其效果和==一致，但用户可以根据对应需求对判断逻辑进行改写，比如直接比较对象某个属性值是否相同，相同则返回true，不同则返回false。需保证equals方法相同对应的对象hashCode也相同。</p><h2 id="简述object类常用方法" tabindex="-1"><a class="header-anchor" href="#简述object类常用方法" aria-hidden="true">#</a> 简述Object类常用方法</h2><ol><li>hashCode：通过对象计算出的散列码。用于map型或equals方法。 需要保证同一个对象多次调用该方法，总返回相同的整型值。</li><li>equals：判断两个对象是否一致。需保证equals方法相同对应的对象hashCode也相同。</li><li>toString: 用字符串表示该对象</li><li>clone:深拷贝一个对象</li></ol><h2 id="简述内部类及其作用" tabindex="-1"><a class="header-anchor" href="#简述内部类及其作用" aria-hidden="true">#</a> 简述内部类及其作用</h2><ul><li>成员内部类：作为成员对象的内部类。可以访问private及以上外部类的属性和方法。外部类想要访问内部类属性或方法时，必须要创建一个内部类对象，然后通过该对象访问内部类的属性或方法。外部类也可访问private修饰的内部类属性。</li><li>局部内部类：存在于方法中的内部类。访问权限类似局部变量，只能访问外部类的final变量。</li><li>匿名内部类：只能使用一次，没有类名，只能访问外部类的final变量。</li><li>静态内部类：类似类的静态成员变量。</li></ul><h2 id="简述string-stringbuffer与stringbuilder" tabindex="-1"><a class="header-anchor" href="#简述string-stringbuffer与stringbuilder" aria-hidden="true">#</a> 简述String/StringBuffer与StringBuilder</h2><p>String类采用利用final修饰的字符数组进行字符串保存，因此不可变。如果对String类型对象修改，需要新建对象，将老字符和新增加的字符一并存进去。</p><p>StringBuilder，采用无final修饰的字符数组进行保存，因此可变。但线程不安全。</p><p>StringBuffer，采用无final修饰的字符数组进行保存，可理解为实现线程安全的StringBuilder。</p><h2 id="简述java序列化与反序列化的实现" tabindex="-1"><a class="header-anchor" href="#简述java序列化与反序列化的实现" aria-hidden="true">#</a> 简述Java序列化与反序列化的实现</h2><p>序列化：将java对象转化为字节序列，由此可以通过网络对象进行传输。</p><p>反序列化：将字节序列转化为java对象。</p><p>具体实现：实现Serializable接口，或实现Externalizable接口中的writeExternal()与readExternal()方法。</p><h2 id="简述java的list" tabindex="-1"><a class="header-anchor" href="#简述java的list" aria-hidden="true">#</a> 简述JAVA的List</h2><p>List是一个有序队列，在JAVA中有两种实现方式:</p><p>ArrayList 使用数组实现，是容量可变的非线程安全列表，随机访问快，集合扩容时会创建更大的数组，把原有数组复制到新数组。</p><p>LinkedList 本质是双向链表，与 ArrayList 相比插入和删除速度更快，但随机访问元素很慢。</p><h2 id="java中线程安全的基本数据结构有哪些" tabindex="-1"><a class="header-anchor" href="#java中线程安全的基本数据结构有哪些" aria-hidden="true">#</a> Java中线程安全的基本数据结构有哪些</h2><p>HashTable: 哈希表的线程安全版，效率低 ConcurrentHashMap：哈希表的线程安全版，效率高，用于替代HashTable Vector：线程安全版Arraylist Stack：线程安全版栈 BlockingQueue及其子类：线程安全版队列</p><h2 id="简述java的set" tabindex="-1"><a class="header-anchor" href="#简述java的set" aria-hidden="true">#</a> 简述JAVA的Set</h2><p>Set 即集合，该数据结构不允许元素重复且无序。JAVA对Set有三种实现方式：</p><p>HashSet 通过 HashMap 实现，HashMap 的 Key 即 HashSet 存储的元素，Value系统自定义一个名为 PRESENT 的 Object 类型常量。判断元素是否相同时，先比较hashCode，相同后再利用equals比较，查询O(1)</p><p>LinkedHashSet 继承自 HashSet，通过 LinkedHashMap 实现，使用双向链表维护元素插入顺序。</p><p>TreeSet 通过 TreeMap 实现的，底层数据结构是红黑树，添加元素到集合时按照比较规则将其插入合适的位置，保证插入后的集合仍然有序。查询O(logn)</p><h2 id="简述java的hashmap" tabindex="-1"><a class="header-anchor" href="#简述java的hashmap" aria-hidden="true">#</a> 简述JAVA的HashMap</h2><p>JDK8 之前底层实现是数组 + 链表，JDK8 改为数组 + 链表/红黑树。主要成员变量包括存储数据的 table 数组、元素数量 size、加载因子 loadFactor。 HashMap 中数据以键值对的形式存在，键对应的 hash 值用来计算数组下标，如果两个元素 key 的 hash 值一样，就会发生哈希冲突，被放到同一个链表上。</p><p>table 数组记录 HashMap 的数据，每个下标对应一条链表，所有哈希冲突的数据都会被存放到同一条链表，Node/Entry 节点包含四个成员变量：key、value、next 指针和 hash 值。在JDK8后链表超过8会转化为红黑树。</p><p>若当前数据/总数据容量&gt;负载因子，Hashmap将执行扩容操作。 默认初始化容量为 16，扩容容量必须是 2 的幂次方、最大容量为 1&lt;&lt; 30 、默认加载因子为 0.75。</p><h2 id="为何hashmap线程不安全" tabindex="-1"><a class="header-anchor" href="#为何hashmap线程不安全" aria-hidden="true">#</a> 为何HashMap线程不安全</h2><p>在JDK1.7中，HashMap采用头插法插入元素，因此并发情况下会导致环形链表，产生死循环。</p><p>虽然JDK1.8采用了尾插法解决了这个问题，但是并发下的put操作也会使前一个key被后一个key覆盖。</p><p>由于HashMap有扩容机制存在，也存在A线程进行扩容后，B线程执行get方法出现失误的情况。</p><h2 id="简述java的treemap" tabindex="-1"><a class="header-anchor" href="#简述java的treemap" aria-hidden="true">#</a> 简述java的TreeMap</h2><p>TreeMap是底层利用红黑树实现的Map结构，底层实现是一棵平衡的排序二叉树，由于红黑树的插入、删除、遍历时间复杂度都为O(logN)，所以性能上低于哈希表。但是哈希表无法提供键值对的有序输出，红黑树可以按照键的值的大小有序输出。</p><h2 id="collection和collections有什么区别" tabindex="-1"><a class="header-anchor" href="#collection和collections有什么区别" aria-hidden="true">#</a> Collection和Collections有什么区别？</h2><ol><li>Collection是一个集合接口，它提供了对集合对象进行基本操作的通用接口方法，所有集合都是它的子类，比如List、Set等。</li><li>Collections是一个包装类，包含了很多静态方法、不能被实例化，而是作为工具类使用，比如提供的排序方法： Collections.sort(list);提供的反转方法：Collections.reverse(list)。</li></ol><h2 id="arraylist、vector和linkedlist有什么共同点与区别" tabindex="-1"><a class="header-anchor" href="#arraylist、vector和linkedlist有什么共同点与区别" aria-hidden="true">#</a> ArrayList、Vector和LinkedList有什么共同点与区别？</h2><ol><li>ArrayList、Vector和LinkedList都是可伸缩的数组，即可以动态改变长度的数组。</li><li>ArrayList和Vector都是基于存储元素的Object[] array来实现的，它们会在内存中开辟一块连续的空间来存储，支持下标、索引访问。但在涉及插入元素时可能需要移动容器中的元素，插入效率较低。当存储元素超过容器的初始化容量大小，ArrayList与Vector均会进行扩容。</li><li>Vector是线程安全的，其大部分方法是直接或间接同步的。ArrayList不是线程安全的，其方法不具有同步性质。LinkedList也不是线程安全的。</li><li>LinkedList采用双向列表实现，对数据索引需要从头开始遍历，因此随机访问效率较低，但在插入元素的时候不需要对数据进行移动，插入效率较高。</li></ol><h2 id="hashmap和hashtable有什么区别" tabindex="-1"><a class="header-anchor" href="#hashmap和hashtable有什么区别" aria-hidden="true">#</a> HashMap和Hashtable有什么区别？</h2><ol><li>HashMap是Hashtable的轻量级实现，HashMap允许key和value为null，但最多允许一条记录的key为null.而HashTable不允许。</li><li>HashTable中的方法是线程安全的，而HashMap不是。在多线程访问HashMap需要提供额外的同步机制。</li><li>Hashtable使用Enumeration进行遍历，HashMap使用Iterator进行遍历。</li></ol><h2 id="如何决定使用hashmap还是treemap" tabindex="-1"><a class="header-anchor" href="#如何决定使用hashmap还是treemap" aria-hidden="true">#</a> 如何决定使用HashMap还是TreeMap?</h2><p>如果对Map进行插入、删除或定位一个元素的操作更频繁，HashMap是更好的选择。如果需要对key集合进行有序的遍历，TreeMap是更好的选择。</p><h2 id="fail-fast和fail-safe迭代器的区别是什么" tabindex="-1"><a class="header-anchor" href="#fail-fast和fail-safe迭代器的区别是什么" aria-hidden="true">#</a> fail-fast和fail-safe迭代器的区别是什么？</h2><ol><li>fail-fast直接在容器上进行，在遍历过程中，一旦发现容器中的数据被修改，就会立刻抛出ConcurrentModificationException异常从而导致遍历失败。常见的使用fail-fast方式的容器有HashMap和ArrayList等。</li><li>fail-safe这种遍历基于容器的一个克隆。因此对容器中的内容修改不影响遍历。常见的使用fail-safe方式遍历的容器有ConcurrentHashMap和CopyOnWriteArrayList。</li></ol><h2 id="hashset中-equals与hashcode之间的关系" tabindex="-1"><a class="header-anchor" href="#hashset中-equals与hashcode之间的关系" aria-hidden="true">#</a> HashSet中，equals与hashCode之间的关系？</h2><p>equals和hashCode这两个方法都是从object类中继承过来的,equals主要用于判断对象的内存地址引用是否是同一个地址；hashCode根据定义的哈希规则将对象的内存地址转换为一个哈希码。HashSet中存储的元素是不能重复的，主要通过hashCode与equals两个方法来判断存储的对象是否相同：</p><ol><li>如果两个对象的hashCode值不同，说明两个对象不相同。</li><li>如果两个对象的hashCode值相同，接着会调用对象的equals方法，如果equlas方法的返回结果为true，那么说明两个对象相同，否则不相同。</li></ol>',147),t=[h];function s(n,d){return i(),e("div",null,t)}const o=a(r,[["render",s],["__file","index.html.vue"]]);export{o as default};
