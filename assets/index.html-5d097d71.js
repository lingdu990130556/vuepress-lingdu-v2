import{_ as p,r as i,o,c,f as n,h as a,a as e,d as t}from"./app-ac465cee.js";const l="/vuepress-lingdu-v2/assets/img-3e531461.png",u="/vuepress-lingdu-v2/assets/img_1-657af67a.png",r="/vuepress-lingdu-v2/assets/img_2-9c5f532b.png",d="/vuepress-lingdu-v2/assets/img_3-4267da6a.png",k="/vuepress-lingdu-v2/assets/img_4-ea946cff.png",v="/vuepress-lingdu-v2/assets/img_5-18486dc0.png",m="/vuepress-lingdu-v2/assets/img_13-eaab8e81.png",h={},b=t(`<h1 id="vuepresss" tabindex="-1"><a class="header-anchor" href="#vuepresss" aria-hidden="true">#</a> vuepresss</h1><h2 id="嵌入页面" tabindex="-1"><a class="header-anchor" href="#嵌入页面" aria-hidden="true">#</a> 嵌入页面</h2><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token title important"><span class="token punctuation">#</span> vuepresss</span>

<span class="token title important"><span class="token punctuation">##</span> 嵌入页面</span>
/\`\`\`md
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width: 150%;height: 600px;margin-left: -25%<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>100%<span class="token punctuation">&quot;</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>600px<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://lingdu990130556.gitee.io/vuepress-lingdu-v2/<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
/\`\`\`
<span class="token bold"><span class="token punctuation">**</span><span class="token content">效果如下</span><span class="token punctuation">**</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>效果如下</strong></p><div style="width:150%;height:600px;margin-left:-25%;"><iframe style="transform:scale(0.80,0.80);" width="100%" height="100%" src="/vuepress-lingdu-v2/"></iframe></div><h2 id="数据统计功能" tabindex="-1"><a class="header-anchor" href="#数据统计功能" aria-hidden="true">#</a> 数据统计功能</h2><h3 id="百度统计" tabindex="-1"><a class="header-anchor" href="#百度统计" aria-hidden="true">#</a> 百度统计</h3>`,7),g={href:"https://segmentfault.com/a/1190000041259928",target:"_blank",rel:"noopener noreferrer"},f=n("h4",{id:"创建站点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#创建站点","aria-hidden":"true"},"#"),a(" 创建站点")],-1),x=n("h5",{id:"登录站点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#登录站点","aria-hidden":"true"},"#"),a(" 登录站点")],-1),_={href:"https://tongji.baidu.com/web/welcome/login",target:"_blank",rel:"noopener noreferrer"},q=t('<h5 id="新增网站" tabindex="-1"><a class="header-anchor" href="#新增网站" aria-hidden="true">#</a> 新增网站</h5><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="填写信息" tabindex="-1"><a class="header-anchor" href="#填写信息" aria-hidden="true">#</a> 填写信息</h5><p>添加网站域名、网站首页等信息：<br><img src="'+u+'" alt="" loading="lazy"></p><h5 id="获取代码" tabindex="-1"><a class="header-anchor" href="#获取代码" aria-hidden="true">#</a> 获取代码</h5><p>添加完后，会自动跳转到代码获取页面，我们可以看到根据我们填写的站点信息生成的监控代码，注意这段代码是有特殊标示的，你需要根据自己的站点信息生成并使用： <img src="'+r+`" alt="" loading="lazy"></p><h4 id="引入代码" tabindex="-1"><a class="header-anchor" href="#引入代码" aria-hidden="true">#</a> 引入代码</h4><p>我们在 config.js 里写入生成的代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">head</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">[</span>
        <span class="token string">&#39;script&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
        var _hmt = _hmt || [];
        (function() {
          var hm = document.createElement(&quot;script&quot;);
          hm.src = &quot;https://hm.baidu.com/hm.js?xxxxxxxxxxxxxxxxxxx&quot;;
          var s = document.getElementsByTagName(&quot;script&quot;)[0]; 
          s.parentNode.insertBefore(hm, s);
        })();
        </span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="验证" tabindex="-1"><a class="header-anchor" href="#验证" aria-hidden="true">#</a> 验证</h4><h5 id="本地验证" tabindex="-1"><a class="header-anchor" href="#本地验证" aria-hidden="true">#</a> 本地验证</h5><p>我们本地运行，刷新页面，然后查看页面请求： <img src="`+d+'" alt="" loading="lazy"> 可以看到页面请求了 hm.js 和 hm.gif ，表明确实发送了请求。</p><h5 id="线上验证" tabindex="-1"><a class="header-anchor" href="#线上验证" aria-hidden="true">#</a> 线上验证</h5><p>现在我们部署到线上。等部署完成后，我们还可以在统计后台的“代码安装检查”页面自动检测或手动检测代码安装情况。 <img src="'+k+'" alt="" loading="lazy"></p><h4 id="等待" tabindex="-1"><a class="header-anchor" href="#等待" aria-hidden="true">#</a> 等待</h4><p>如果代码安装正确，一般 20 分钟后，可以查看网站分析数据。 <img src="'+v+`" alt="" loading="lazy"></p><h4 id="单页应用的数据统计问题" tabindex="-1"><a class="header-anchor" href="#单页应用的数据统计问题" aria-hidden="true">#</a> 单页应用的数据统计问题</h4><h5 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h5><p>我们通过在 head 中引入百度统计代码，如果是普通的页面，没有什么问题，但我们用 VuePress 搭建的是一个单页应用，页面切换过程中，不会重新加载页面，自然也不会触发百度统计。所以我们只能统计到用户访问了页面，但具体点开了哪些文章，跳转了哪些路由并不知道。为了实现路由切换时的数据统计，我们还需要监听路由改变，手动上报数据，那具体我们该怎么做呢?</p><h5 id="思路" tabindex="-1"><a class="header-anchor" href="#思路" aria-hidden="true">#</a> 思路</h5><p>首先根据 VuePress 官网的介绍：</p><blockquote><p>一个 VuePress 网站是一个由 Vue、Vue Router和 webpack 驱动的单页应用。</p></blockquote><p>而在 VuePress 文档的基本配置中，介绍了一个应用级别的配置：</p><blockquote><p>由于 VuePress 是一个标准的 Vue 应用，你可以通过创建一个 .vuepress/client.js 文件来做一些应用级别的配置，当该文件存在的时候，会被导入到应用内部。client.js 应该 export default 一个钩子函数，并接受一个包含了一些应用级别属性的对象作为参数。你可以使用这个钩子来安装一些附加的 Vue 插件、注册全局组件，或者增加额外的路由钩子等：</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 使用异步函数也是可以的</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  Vue<span class="token punctuation">,</span> <span class="token comment">// VuePress 正在使用的 Vue 构造函数</span>
  options<span class="token punctuation">,</span> <span class="token comment">// 附加到根实例的一些选项</span>
  router<span class="token punctuation">,</span> <span class="token comment">// 当前应用的路由实例</span>
  siteData<span class="token punctuation">,</span> <span class="token comment">// 站点元数据</span>
  isServer <span class="token comment">// 当前应用配置是处于 服务端渲染 或 客户端</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...做一些其他的应用级别的优化</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里我们可以看到，有提供当前应用的路由实例 router，因为 VuePress 的路由是由 Vue Router 驱动的，所以我们查下 Vue Router 的官网介绍，可以看到一个全局前置守卫：</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>你可以使用 router.beforeEach 注册一个全局前置守卫：</p></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><blockquote><p>每个守卫方法接收三个参数：</p><ul><li>to: Route: 即将要进入的目标 路由对象</li><li>from: Route: 当前导航正要离开的路由</li><li>next: Function: 一定要调用该方法来 resolve 这个钩子。</li></ul></blockquote></div><p>由此得出，我们可以在获取路由实例后，注册一个全局前置守卫来监听路由改变。</p><p>现在我们能监听路由改变了，怎么手动上报数据呢？这个我们可以查看百度统计的文档，有讲到针对这种单页应用如何在 JS 中调用 PV 跟踪代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>_hmt<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;_trackPageview&#39;</span><span class="token punctuation">,</span> pageURL<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token comment">// pageURL：指定要统计PV的页面URL。此项必选。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在万事俱备，我们开始写起来吧。</p><h4 id="实践" tabindex="-1"><a class="header-anchor" href="#实践" aria-hidden="true">#</a> 实践</h4><p>我们在 .vuepress 文件夹下新建一个 client.js 文件，代码写入：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> router <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> _hmt <span class="token operator">!==</span> <span class="token string">&quot;undefined&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          _hmt<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;_trackPageview&quot;</span><span class="token punctuation">,</span> to<span class="token punctuation">.</span>fullPath<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      
      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们在本地再运行下代码，然后点击文章，包括点击文章中的锚点，查看请求就可以看到上报了数据。</p><h2 id="问题-1" tabindex="-1"><a class="header-anchor" href="#问题-1" aria-hidden="true">#</a> 问题</h2><h3 id="识别不了中文路径" tabindex="-1"><a class="header-anchor" href="#识别不了中文路径" aria-hidden="true">#</a> 识别不了中文路径</h3>`,39),w={href:"https://segmentfault.com/a/1190000022275001?sort=votes",target:"_blank",rel:"noopener noreferrer"},j=t(`<blockquote><p>在引入静态资源的时候，如果路径中存在中文会导致加载失败，例如引入一张图片：<br><code>![](./中文/零度.jpg)</code><br> 中文路径会导致图片加载失败</p></blockquote><p><strong>解决方案</strong></p><ul><li>安装 markdown-it-disable-url-encode</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i markdown-it-disable-url-encode
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>config.js引入模块</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// .....</span>
  <span class="token literal-property property">markdown</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// ......</span>
    <span class="token function-variable function">extendMarkdown</span><span class="token operator">:</span> <span class="token parameter">md</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      md<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;markdown-it-disable-url-encode&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="打包后md文件引入图片显示失败" tabindex="-1"><a class="header-anchor" href="#打包后md文件引入图片显示失败" aria-hidden="true">#</a> 打包后md文件引入图片显示失败</h3>`,7),y={href:"https://www.jianshu.com/p/f9b9edd210f8",target:"_blank",rel:"noopener noreferrer"},V=t(`<blockquote><p>按照测试时候写入文档的图片引用路径在发布后显示失败<br><code>![](./中文/零度.jpg)</code></p></blockquote><p><strong>解决方案</strong></p><p>修改图片引用方式</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$withBase(&#39;./中文/零度.jpg&#39;)<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>foo<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="升级" tabindex="-1"><a class="header-anchor" href="#升级" aria-hidden="true">#</a> 升级</h2>`,5),P={href:"https://zhuanlan.zhihu.com/p/486463500",target:"_blank",rel:"noopener noreferrer"},z={href:"https://blog.csdn.net/qq_33806001/article/details/126255433",target:"_blank",rel:"noopener noreferrer"},R=t(`<h2 id="哀悼模式" tabindex="-1"><a class="header-anchor" href="#哀悼模式" aria-hidden="true">#</a> 哀悼模式</h2><div class="hint-container tip"><p class="hint-container-title">设置全局黑白</p></div><div class="language-scss line-numbers-mode" data-ext="scss"><pre class="language-scss"><code><span class="token comment">// 设置全局黑白色</span>
<span class="token selector">body </span><span class="token punctuation">{</span>
  <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">grayscale</span><span class="token punctuation">(</span>100%<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将整个页面转为黑白</span>
<span class="token punctuation">}</span>

<span class="token selector">img </span><span class="token punctuation">{</span>
  <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">grayscale</span><span class="token punctuation">(</span>100%<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将所有图片转为黑白</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',4);function E(B,N){const s=i("ExternalLinkIcon");return o(),c("div",null,[b,n("p",null,[a("摘自"),n("a",g,[a("VuePress 博客优化之添加数据统计功能"),e(s)])]),f,x,n("p",null,[a("登陆百度统计后台："),n("a",_,[a("https://tongji.baidu.com/web/welcome/login"),e(s)])]),q,n("p",null,[n("a",w,[a("Vuepress 图片资源中文路径问题"),e(s)])]),j,n("p",null,[n("a",y,[a("vuepress打包后样式丢失、图片加载路径出错的问题解决方案"),e(s)])]),V,n("p",null,[n("a",P,[a("参考"),e(s)])]),n("p",null,[n("a",z,[a("评论插件"),e(s)])]),R])}const S=p(h,[["render",E],["__file","index.html.vue"]]);export{S as default};
