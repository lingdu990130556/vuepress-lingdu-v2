import{_ as n,o as s,c as a,d as t}from"./app-ac465cee.js";const e="/vuepress-lingdu-v2/assets/img-70c2f0ed.png",p="/vuepress-lingdu-v2/assets/img_1-a08d9120.png",o="/vuepress-lingdu-v2/assets/img_2-5f69cdcf.png",c="/vuepress-lingdu-v2/assets/img_3-9458ad47.png",l="/vuepress-lingdu-v2/assets/img_4-02b808bf.png",i="/vuepress-lingdu-v2/assets/img_5-7cbb66e2.png",u="/vuepress-lingdu-v2/assets/img_6-ea7a086b.png",r="/vuepress-lingdu-v2/assets/img_7-800798db.png",k="/vuepress-lingdu-v2/assets/img_8-89a1445e.png",d="/vuepress-lingdu-v2/assets/img_9-caba5e0f.png",m="/vuepress-lingdu-v2/assets/img_10-8da50bec.png",v="/vuepress-lingdu-v2/assets/img_11-440bc23a.png",g="/vuepress-lingdu-v2/assets/img_12-efde4a13.png",b="/vuepress-lingdu-v2/assets/img_13-7276c918.png",S="/vuepress-lingdu-v2/assets/img_14-dcf38c9b.png",y={},q=t(`<h1 id="mybatis源码" tabindex="-1"><a class="header-anchor" href="#mybatis源码" aria-hidden="true">#</a> Mybatis源码</h1><h2 id="_1-回顾" tabindex="-1"><a class="header-anchor" href="#_1-回顾" aria-hidden="true">#</a> 1. 回顾</h2><h3 id="_1-1-jdbc-java-database-connectivity" tabindex="-1"><a class="header-anchor" href="#_1-1-jdbc-java-database-connectivity" aria-hidden="true">#</a> 1.1 JDBC(Java DataBase Connectivity)</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>JDBC就是使用Java语言操作关系型数据库的一套API, 全称(Java DataBase Connectivity)Java数据库连接</p><p>JDBC本质:</p><ul><li>官方(sun公司)定义的一套操作所有关系型数据库的规则, 即 接口</li><li>各个数据库厂商去实现这套接口, 提供数据库驱动jar包</li><li>我们可以使用这套接口(JDBC)编程, 真正执行的代码是驱动jar包中的实现类</li></ul></div><h4 id="_1-1-1-使用的步骤" tabindex="-1"><a class="header-anchor" href="#_1-1-1-使用的步骤" aria-hidden="true">#</a> 1.1.1 使用的步骤</h4><blockquote><ul><li>1.<strong>加载数据库驱动</strong></li><li>2.<strong>获取数据库连接</strong></li><li>3.<strong>定义SQL语句</strong></li><li>4.<strong>获取执行SQL对象</strong></li><li>5.<strong>执行SQL</strong></li><li>6.<strong>处理返回的结果集</strong></li><li>7.<strong>释放资源</strong></li></ul></blockquote><h4 id="_1-1-2-使用示例" tabindex="-1"><a class="header-anchor" href="#_1-1-2-使用示例" aria-hidden="true">#</a> 1.1.2 使用示例</h4><p><code>entity</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">love<span class="token punctuation">.</span>lingdu<span class="token punctuation">.</span>entity</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TbUser</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> gender<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> hobby<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用JDBC访问数据库</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">love<span class="token punctuation">.</span>lingdu<span class="token punctuation">.</span>jdbcDemo</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">love<span class="token punctuation">.</span>lingdu<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">TbUser</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">{</span>
    <span class="token comment">//JDBC使用流程</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">PreparedStatement</span> preparedStatement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">//1.加载数据库驱动</span>
            <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;com.mysql.jdbc.Driver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//2.获取数据库连接</span>
            <span class="token comment">//通过驱动管理类获取数据库连接</span>
            connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc:mysql://localhost:3306/mybatis_source?characterEncoding = utf - 8&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot; root&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot; root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//3.定义SQL语句</span>
            <span class="token comment">//定义sql语句, ? 表示占位符</span>
            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;select * from tb_user where id = ?&quot;</span><span class="token punctuation">;</span>
            <span class="token comment">//4. 获取执行sql的对象 statement</span>
            preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//设置参数, 第一个参数为sql语句中参数的序号(从1开始), 第二个参数为设置的参数值</span>
            preparedStatement<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//5.执行sql</span>
            <span class="token comment">//向数据库发出sql执行查询, 查询出结果集</span>
            resultSet <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//6. 处理返回的结果集</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> id <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">String</span> userName <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;user_name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">String</span> gender <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;gender&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">String</span> hobby <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;hobby&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//封装User对象</span>
                <span class="token class-name">TbUser</span> tbUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TbUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                tbUser<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
                tbUser<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                tbUser<span class="token punctuation">.</span><span class="token function">setGender</span><span class="token punctuation">(</span>gender<span class="token punctuation">)</span><span class="token punctuation">;</span>
                tbUser<span class="token punctuation">.</span><span class="token function">setHobby</span><span class="token punctuation">(</span>hobby<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tbUser<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token comment">//7.释放连接</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>preparedStatement <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    preparedStatement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-1-3-总结" tabindex="-1"><a class="header-anchor" href="#_1-1-3-总结" aria-hidden="true">#</a> 1.1.3 总结</h4><p>通过以上的代码, 我们可以知道JDBC的四个核心对象</p><ol><li><strong>DriverManager(驱动管理类)</strong> : 注册驱动和获取数据库连接</li><li><strong>Connection(数据库连接对象)</strong> : 获取指定SQL对象和管理事务</li><li><strong>Statement(执行SQL语句)</strong> : 执行DML、DDL、DQL语句</li><li><strong>ResultSet(结果集对象)</strong> : 封装DQL语句的查询结果</li></ol><h4 id="_1-1-4-存在的问题" tabindex="-1"><a class="header-anchor" href="#_1-1-4-存在的问题" aria-hidden="true">#</a> 1.1.4 存在的问题</h4><p>使用JBDC存在的问题</p><ol><li>数据库连接, 使用时候就创建, 不使用时候立即释放, 对数据库进行频繁连接开启和关闭, 造成数据库资源浪费, 硬性数据库性能 设想: 使用数据库连接池管理数据库连接</li><li>将sql语句硬编码到Java代码中, 如果sql语句修改了, 需要重新编译Java代码, 不利于系统维护 设想: 将sql语句配置在xml配置文件中, 即使sql变化了, 不需要对Java代码惊醒冲洗编译</li><li>向 preparedStatement 中设置参数, 对占位符位置和设置参数值, 硬编码在Java代码中, 不利于系统维护 设想: 将sql语句及占位符号和参数全部配置在xml中</li><li>从resultSet中遍历结果集数据时, 存在硬编码, 将获取表的字段进行硬编码, 不利于系统维护 设想: 将查询的结果集, 自动映射成Java对象</li></ol><h3 id="_1-2-mybatis开发简单回顾" tabindex="-1"><a class="header-anchor" href="#_1-2-mybatis开发简单回顾" aria-hidden="true">#</a> 1.2 Mybatis开发简单回顾</h3><h4 id="_1-2-1-mybatis是什么" tabindex="-1"><a class="header-anchor" href="#_1-2-1-mybatis是什么" aria-hidden="true">#</a> 1.2.1 Mybatis是什么</h4><p>Mybatis是一个 ORM (Object RelationShip Mapper 对象关系映射)类型框架, 解决了数据库访问和操作问题, 对现有的JDBC 技术的封装</p><h4 id="_1-2-2-mybatis开发环境搭建" tabindex="-1"><a class="header-anchor" href="#_1-2-2-mybatis开发环境搭建" aria-hidden="true">#</a> 1.2.2 Mybatis开发环境搭建</h4><ol><li>准备依赖</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- mybatis--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.4.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 数据库驱动--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.1.48<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><p>准备配置文件</p><ul><li>基本配置文件 mybatis-config.xml <ul><li>数据源的设置 environment</li><li>类型别名</li><li>mapper文件的注册</li></ul></li><li>Mapper文件 <ul><li>DAO规定方法的实现 ------&gt; SQL语句</li></ul></li></ul></li><li><p>初始化配置<br> mybatis-config.xml<br> 配置environment<br> 示例:</p></li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span> <span class="token name">PUBLIC</span> <span class="token string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span>
        <span class="token string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>love.lingdu.entity.User<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>User<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>love.lingdu.entity.Account<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Account<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>default<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--environment是可以配置多个--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>default<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>JDBC<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transactionManager</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>POOLED<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>driver<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.mysql.jdbc.Driver<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>url<span class="token punctuation">&quot;</span></span>
                          <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc:mysql://localhost:3306/mybatis_source?useSSL=false<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- &lt;environment id=&quot;oracle&quot;&gt;
        &lt;transactionManager type=&quot;JDBC&quot;&gt;&lt;/transactionManager&gt;
        &lt;dataSource type=&quot;POOLED&quot;&gt;
        &lt;property name=&quot;driver&quot; value=&quot;oracle.jdbc.OracleDriver&quot;&gt;
        &lt;/property&gt;
        &lt;property name=&quot;url&quot;
        value=&quot;jdbc:oracle:thin:@localhost:1521:xe&quot;&gt;&lt;/property&gt;
        &lt;property name=&quot;username&quot; value=&quot;hr&quot;/&gt;
        &lt;property name=&quot;password&quot; value=&quot;hr&quot;/&gt;
        &lt;/dataSource&gt;
        &lt;/environment&gt;--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--&lt;package name=&quot;&quot;--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UserDAOMapper.xml<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>AccountDAOMapper.xml<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>开发步骤 <ul><li>entity</li><li>类型别名</li><li>table</li><li>DAO接口</li><li>Mapper文件</li><li>Mapper文件的注册</li><li>API编程</li></ul></li></ol><h4 id="_1-2-3-细节说明" tabindex="-1"><a class="header-anchor" href="#_1-2-3-细节说明" aria-hidden="true">#</a> 1.2.3 细节说明</h4><ol><li><p>如何访问指定数据库</p><p>我们不指定的话, 访问的就是默认数据库, 指定database就会访问指定数据源<br> 我们调用 DAO层 中的方法执行对应的SQL语句的时候, 到底会访问哪个数据库呢? 这个是由 databaseId 决定的, 我们把 databaseId 设置成 default , 他就访问的是哪一个数据库</p><p>如果在MyBatis当中涉及到多数据源<br> 事务不好控制了<br> XXXService当中涉及到了ADAO.m1()使用default数据源, BDAO.m2中使用的是Oracle数据源, 怎么办</p></li><li><p>配置别名的作用</p></li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>love.lingdu.entity.User<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>User<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>love.lingdu.entity.Account<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Account<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置别名的作用就是在Mapper文件当中无需再写全限定名</p><ol start="3"><li>Mapper.xml注册</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--&lt;package name=&quot;&quot;--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UserDAOMapper.xml<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>AccountDAOMapper.xml<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>API编写</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span>
    <span class="token comment">// 获取文件的输入流</span>
    <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;mybatis-config.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SqlSessionFactory</span> sessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">UserDAO</span> userDAO <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserDAO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> userDAO<span class="token punctuation">.</span><span class="token function">queryAllUsersByPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">User</span> user <span class="token operator">:</span> users<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;user = &quot;</span><span class="token operator">+</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者可以这样写</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span>
    <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;mybatis-config.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token string">&quot;love.lingdu.dao.UserDAO.queryAllUsersByPage&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;users = &quot;</span><span class="token operator">+</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-4-核心代码分析" tabindex="-1"><a class="header-anchor" href="#_1-2-4-核心代码分析" aria-hidden="true">#</a> 1.2.4 核心代码分析</h4><p>核心代码实例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 第一种写法</span>
<span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;mybatis-config.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">SqlSessionFactory</span> sessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">UserDAO</span> userDAO <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserDAO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> userDAO<span class="token punctuation">.</span><span class="token function">queryAllUsersByPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 第二种写法</span>
<span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;mybatis-config.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token string">&quot;love.lingdu.dao.UserDAO.queryAllUsersByPage&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两种方式功能等价, 实现效果有什么区别? 哪种方式好?</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code># 第一种方式好<span class="token punctuation">,</span> 表达概念更清晰<span class="token punctuation">,</span> 可读性更好
<span class="token operator">-</span> 我们在表达一个含义的时候<span class="token punctuation">,</span>绝不是用字符串来表达的<span class="token punctuation">,</span> 是用类型来表达的
比如说<span class="token operator">:</span>
<span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token char">&#39;huxz&#39;</span><span class="token punctuation">;</span>
用字符串来表示一个名字的概念<span class="token punctuation">,</span> huxz到底是什么名字<span class="token punctuation">,</span> 是人名还是狗名<span class="token punctuation">,</span> 你说不清楚<span class="token punctuation">,</span> 所以用字符串表达不清
楚
所以java为什么要强调封装<span class="token punctuation">,</span> 定义类型
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>  
    <span class="token keyword">private</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token char">&#39;huxz&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
# 第一种开发<span class="token punctuation">,</span> 本质上就是对第二种开发的封装<span class="token punctuation">(</span>代理设计模式<span class="token punctuation">)</span>
<span class="token operator">-</span> <span class="token class-name">Mybatis</span>刚刚诞生的时候<span class="token punctuation">,</span> 对于数据库的操作都是第二种<span class="token punctuation">,</span> 没有第一种<span class="token punctuation">,</span> 在后续版本迭代的时候<span class="token punctuation">,</span> 才
<span class="token operator">-</span> 有了第一种<span class="token punctuation">.</span> 第二种<span class="token punctuation">,</span> 本质上就是将第二种的实现方式进行了封装<span class="token punctuation">,</span> 通过代理设计模式进行了封装

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-mybatis的核心对象" tabindex="-1"><a class="header-anchor" href="#_2-mybatis的核心对象" aria-hidden="true">#</a> 2. MyBatis的核心对象</h2><p>我们常说 Mybatis 是对 JDB C的封装, 那么他是通过什么来封装的呢? 封装的是什么呢?<br> JDBC设计的内容无非是以下的几个内容:</p><ul><li>Connection</li><li>Statement</li><li>ResultSet</li></ul><p>而Mybatis通过 SqlSession 封装了JDBC的使用</p><p><strong>结论:</strong><br> Mybatis通过SqlSession封装了JDBC<br> 封装了JDBC的 ResultSet , Statement . 通过这些Statement与数据库进行交互, 最终的结果由ResultSet进行封装, 进 而返回给我们</p><p><code>Statement</code> 主要包括</p><ul><li>普通的Statement</li><li>PreparedStatement(预编译Statement, 可以防止SQL注入)</li><li>CallableStatement(主要应用在存储过程层面上)</li></ul><figure><img src="`+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>但是对于Mybatis来讲, 他不仅仅包含 <code>SqlSession</code> , 还包括 <code>SqlSessionFactory</code> , <code>mybatis-config.xml</code> , <code>Mapper.xml</code></p><p>SqlSessionFactory -------------创建---------------&gt; SqlSession</p><figure><img src="'+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code># <span class="token class-name">Mybatis</span>
<span class="token operator">-</span> <span class="token class-name">SqlSession</span>封装了<span class="token constant">JDBC</span>的使用<span class="token punctuation">,</span> 而且他还提供了<span class="token class-name">SqlSessionFactory</span>来创建<span class="token class-name">SqlSession</span><span class="token punctuation">,</span> 但是还需要
<span class="token operator">-</span> 我们在配置文件中书写相关配置<span class="token punctuation">,</span> 进而最终由<span class="token class-name">SqlSession</span>帮助我们基于<span class="token class-name">Mapper</span>文件生成<span class="token constant">DAO</span><span class="token punctuation">,</span> 这一套东西构
<span class="token operator">-</span> 了<span class="token class-name">Mybatis</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-1-mybatis的核心对象及作用" tabindex="-1"><a class="header-anchor" href="#_2-1-mybatis的核心对象及作用" aria-hidden="true">#</a> 2.1 Mybatis的核心对象及作用</h3><figure><img src="`+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Mybatis是有两大类核心对象</p><h4 id="_2-1-1-数据存储对象" tabindex="-1"><a class="header-anchor" href="#_2-1-1-数据存储对象" aria-hidden="true">#</a> 2.1.1 数据存储对象</h4><p>概念: 在Java中(JVM)对Mybatis相关的 <code>配置信息</code> 进行 <code>封装</code></p><p>我们知道文件他存了很多东西, 存了很多配置的内容, 我们不可能用点就读一次文件, 因为他频繁会产生IO, 作为IO来将 他是操作系统层面上的资源, 他的创建绝不是虚拟机单独完成的, 他一定是虚拟机与操作系统进行交互和交流来完成 的, 所以注定IO在我们开发过程中一定是越少越好, 能复用最好, 所以说这些Mybatis文件不可能是随用随读的, 他一定是 一次性读取, 进而封装在Java对象当中</p><p>问题: 配置信息要封装成对象, 那么他有几种配置信息??</p><p>Mybatis有两种配置文件: <code>mybatis-config.xml</code> 和 <code>XXXDAOMapper.xml</code></p><h5 id="_2-1-1-1-configuration" tabindex="-1"><a class="header-anchor" href="#_2-1-1-1-configuration" aria-hidden="true">#</a> 2.1.1.1 Configuration</h5><p>mbatis-config.xml -------------- 封装成了 --------------&gt; Configuration</p><p>Configuration的作用:</p><ul><li>封装mybatis-config.xml相关的内容 <ul><li>setting标签对应的内容</li><li>environment标签对应的内容</li><li>typeAlias标签对应的内容</li><li>loadedResource</li></ul></li></ul><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>cacheEnabled从这个属性我们可以看到，这个我们可以写也可以不写，因为我们不写的话我们默认走的就是默认 值</p><ul><li>封装了Mapper文件 MappedStatements(Mapper文件相关的内容, 在Configuration对象中进行了汇总, 为什么要汇总, 为了以后用起来方 便)</li></ul><p>Configuration -----&gt; MappedStatements ----&gt; MappedStatement ----&gt; 封装 xxxDAOMapper.xml -----&gt; caches -----&gt; resultMaps -----&gt; parameterMaps -----&gt; keyGenerators</p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>caches, parameterMaps, resultMaps, MapperdStatement, keyGenerators这些是把Mapper.xml文件中的内容进行了封 装</p><p>resultMaps: 所有的Mapper.xml文件中resultMap标签</p><p>parameterMaps: 是对sql标签上的parameterMap属性做了封装</p><p>上面这些属性都加了s, 表示的是复数, 也就是他的数量不止一个, 是所有的Mapper.xml文件中的这些属性都封装到 这里面了, 这些不仅仅要存还要用, 所以是将他们存到一个Map中, 他是有key的, 他的key就是namespace.id</p><ul><li>创建Mybatis其他核心对象<br> 可以理解为Configuration对象是其他对象的工厂<br> Executor<br> ParameterHandler<br> ResultSetHandler<br> StatementHandler</li></ul><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="_2-1-1-2-mappedstatement" tabindex="-1"><a class="header-anchor" href="#_2-1-1-2-mappedstatement" aria-hidden="true">#</a> 2.1.1.2 MappedStatement</h5><p>MappedStatement对象, 也是一个存储对象, 存储的是Mapper文件中我们定义的SQL标签, 其中封装的是我们Mapper文件 中的一个个标签, 举例来讲, 其中一个标签就会被封装成MappedStatement对象</p><p>XXXDAOMapper.xml ------- 封装成了 -------&gt; MappedStatement(形象的认知, 不准确)</p><p>MappedStatement 封装的是XXXDAOMapper.xml里面的一个个的标签, 标签里面的属性会被封装成MappedStatement里 面的一个一个属性</p><p>我们的标签当中肯定会有id的属性，在我们的MappedStatement当中也会有id的属性。id属性完全唯一，他存储的是 namespace.id所以，也是唯一，注定了在一个Mabatis当中会有N个MapperStatement对象</p><p>这里面的statementType是什么意思，指的就是普通，预编译，存储过程。默认使用的就是preparedStatement，所以在 我们的SQL标签上也肯定有这个属性，这个属性默认prepared, 因为普通得Statement不具有预编译的功能, 效率太低, CallableStatement 存储过程, 基本上不用</p><p>MappedStatement中封装SQL语句 -----&gt; BoundSql 一条完整的SQL = sql语句本身 + 参数 -----封装成了----&gt; BoundSql -----从属于-----&gt; MappedStatement</p><p><img src="'+k+'" alt="" loading="lazy">]</p><h5 id="_2-1-1-3-mappedstatement和configuration对象关系" tabindex="-1"><a class="header-anchor" href="#_2-1-1-3-mappedstatement和configuration对象关系" aria-hidden="true">#</a> 2.1.1.3 MappedStatement和Configuration对象关系</h5><p>Configuration 中有 MappedStatement , MappedStatement中也有Configuration</p><h5 id="_2-1-1-4-思考" tabindex="-1"><a class="header-anchor" href="#_2-1-1-4-思考" aria-hidden="true">#</a> 2.1.1.4 思考</h5><p>什么时候创建Configuration, 什么时候创建MapperdStatement, 以及他与我们的SqlSession(Mybatis核心功能) 是怎么交互 的?</p><p>操作类对象大致有一下几种：</p><ul><li>Excutor</li><li>StatementHandler</li><li>ParameterHandler</li><li>ResultSetHandler</li><li>TypeHandler</li></ul><p>这些对象是Configuration对象进行创建的。有了操作类对象之后，我们基于上述存储类对象，我们就可以对数据库进 行相应的操作了。</p><h4 id="_2-1-2-操作类型对象" tabindex="-1"><a class="header-anchor" href="#_2-1-2-操作类型对象" aria-hidden="true">#</a> 2.1.2 操作类型对象</h4><div class="hint-container tip"><p class="hint-container-title">提示</p><p>我们说作为Configuration或者是MappedStatement也好, 他存储的都是我们在配置文件中或者在注解当中 所配置 的相关信息, 类似于我们数据库中表中存储的数据是一样的, 光有这些存储数据的对象是不够的 除了这些存储数 据的对象外, 我们还应该有操作这些数据完成功能的对象</p><p>Mapper.xml当中的SQL标签都被解析成了一个一个的MappedStament对象, 那么我们当中的SQL是基于什么形式 进行封装的呢?</p><p>我们要知道, Java当中一切皆对象, MappedStatement当中的SQL被封装成了MappedStateMent当中的SqlSource对 象</p><p>我们通过sqlSource.getBoundSql()来获取一个BoundSql对象, BoundSQL当中的对象就是对于SQL语句的真实封装</p><p>Configuration也好, MappedStatement也好, 存储的是我们配置文件或者是在注解当中书写的配置信息. 它们是一 个存储对象</p></div><h5 id="_2-1-2-1-executor" tabindex="-1"><a class="header-anchor" href="#_2-1-2-1-executor" aria-hidden="true">#</a> 2.1.2.1 Executor</h5><p><code>Executor</code> 是执行器的意思, 什么是执行器, 执行器就是完成各种操作的对象. 他是Mybatis当中处理功能的核心. 增删改 和查都在Executor当中都提供了相应的方法. 我们在不了解Mybatis的时候, 我们认为Mybatis当中我们使用的是 SqlSession, 但是实际上, 真正执行各种操作的是 <code>Executor</code></p><p>我们说Executor是完成Mybatis中操作对象的核心. 他是一个接口, 我们从接口实现当中可以看到具体的功能点</p><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>Executor</code> 中提供了</p><pre><code>* 增删改查(update(增删改)、query(查))
* 事务操作
  提交、回滚
* 缓存相关的操作
</code></pre><p>之前我们总以为是由 <code>SqlSession</code> 来完成一系列的操作, 其实是交由 <code>Executor</code> 来落实操作的</p><p>问题: <code>Executor</code> 是接口, 为啥是接口?</p><p>设计原则: 操作相关的类型, 设计成接口</p><p>xxxService xxxxDAO Executor SqlSession</p><p>未来开发设计之后, 我们拿到一个全新的功能之后, 我们不知道怎么设计. 我们这里有一个规范, 但凡是操作相关的类 型, 我们都需要设计成接口. 就比如我们的SqlSession也是一个接口</p><p>设计成接口也是为了提供一种规范, 我们在这种规范下可以有不同的实现, 也就是不同的实现类适配不同的业务场景</p><p>我们说任何对数据库的操作底层都得用JDBC, 而JDBC中三大件: <code>Connection</code> 是连接数据库, <code>ResultSet</code> 是获得查询 结果集的, 而真正与数据库传输sql进行交互的是 <code>Statement</code> , 通过 看代码我们会发现Statement是和Sql语句相关(Connection创建的), 换句话说, 如果日后我的SQL 语句不变, 完全可以用一个Statement, 这样就有了复用 <code>Statement</code> 的需求了, 同时因为我少创建 了 <code>Statement</code> 对象, 他的效率会得到一个很好的保障</p><figure><img src="`+m+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>BaseExcutor</code> 仅仅是一个适配器, 仅仅提供了了一些基本的功能. 真正的核心的实现类最为核心的三个实现类是: <code>Executor</code> 实现类</p><ul><li><p>BatchExcutor 在Mybatis当中,如果你还想进行相应的批处理的操作, 也就是一个连接执行一坨sql语句, 这个时候你 就可以考 虑用BatchExcutor</p><pre><code>BatchExecutor是一个批处理的执行器, 我们知道在JDBC当中就有批处理的操作, 如果我们想在JDBC
当中仍然有批处理的操作. 使用这个BatchExecutor即可. 也就是一个Connection处理一坨SQL语句,
我们就可以考虑用这个执行器
</code></pre></li><li><p>ReuseExcutor(是为了复用statement设计的)<br> 目的: 复用Statement 在什么情况下会复用Statement的呢? Statement的创建与什么相关</p><pre><code>ReuseExecutor这是一个复用Executor, 他复用的是Statement. 我们说任何对数据库的操作底层都得用JDBC.
JDBC中的三大件东西: Connection是连接数据库的, ResultSet是获取查询结果集的, 真正和数据库交互的是
Statement. 复用Statement在什么条件下会发生呢? Statement与什么相关呢?
Statement是SQL语句相关的. 如果我们的SQL在任何条件下都不会改变的话. 我们就可以一直使用这个Statement
对象, 减少了对象的创建, 保证了性能, 这个SQL语句的可以是增删改查任何的语句, 但是不能有任何的改变,
任何的改变的话, 就不适用了

JDBC当中批处理是啥意思?
我们最简单的JDBC是获取一个Connection之后, 我们直接获取一个Statement对象, 然后拿着这个对象
和数据库沟通, 然后取到结果集, 释放连接, 但是这样会有一个问题, 需要频繁的有连接的创建和关闭. 或
者是连接池的获取和归还
我们想到了批处理, 也就是在一个连接之上, 与数据库进行多次SQL交互, 这样的话我们就省略了大量的
Connection的创建和销毁, 这就是批处理, 大大提高了性能, 站在Mybatis当中我们想要使用批处理的
话, 我们就使用BatchExecutor
</code></pre></li><li><p>SimpleExcutor(常用Excutor Mybatis推荐 默认)<br> 值得注意的是常用的执行器往往是最简单的这个: SimpleExecutor, 完成常规的操作, 这个是最核心的Executor, 这 要是Mybatis当中内置推荐的执行器. 如果我们不更改配置的话, 默认使用的就是Configuration当中的简单的<br><strong>Executor</strong><img src="`+v+'" alt="" loading="lazy"></p><p>Configuration三个功能: 封装Mybatis-config.xml, 存储MappedStatement, 创建其他的核心执行的对象包括Executor, 所以配置肯定在这个类里边</p></li></ul><p><strong>为什么说IO，连接都是非常真贵的资源？</strong> 我们知道，我们搞Java开发我们底层面临的是OS操作系统的资源，在它之 上我们构建了一个Java虚拟机的东西。我们写Java程序是运行在虚拟机层面上的东西，然后我们想要在虚拟机当中去 建立网络连接、或者是io、或者是线程的时候，这个时候虚拟机就办不到了，需要去沟通操作系统，因为只有操作系 统可以进行读取文件，可以去访问互联网，只有操作系统可以操作CPU操作线程、进程。所以，我们知道这些操作背 后都有操作系统，都会有这些native的方法的操作，而这些东西都是耗时和占用资源的，所以我们认为这些东西，必 须要关，必须要复用，必须要池化。</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Excutor来处理和数据库的操作，那么这个是怎么和JDBC建立连接的呢，这就和后面的对象有关系了。</p><p>Executor才是真正完成数据库交互, 增删改查的核心, 但是和我们前面所讲的: 一切操作的底层, 对于数据库这个层面上 来讲, 都应该是JDBC, 现在Mybatis做了这项工作之后, 他怎么和JDBC建立联系呢? 那就由后面的对象配合他来完成</p><h5 id="_2-1-2-2-statementhandler-主要的功能-增删改查" tabindex="-1"><a class="header-anchor" href="#_2-1-2-2-statementhandler-主要的功能-增删改查" aria-hidden="true">#</a> 2.1.2.2 StatementHandler(主要的功能: 增删改查)</h5><p>StatementHandler是Mybatis真正和JDBC建立联系的核心, 那又是怎么建立联系的呢?</p><p>他直接与JDBC中的Statement建立联系(也可以理解为StatementHandler是对JDBC的Statement的封装)也就是说Executor 要完成操作(他也得用JDBC), 进而就会调用StatementHandler, 而StatementHandler里面封装了Statement, 进而就可以真 正的与数据库进行相关的联络和联系, 进而完成他的增删改查了</p><p>StatementHandler是MyBatista封装了JDBC Statement, 真正Mybatis进行数据库访问数据的核心</p><p>问题: 为啥要用Executor, 不能直接StatementHandler这里为什么又包了一层, 不能删掉Executor?</p><p>Executor当中有三件事: 增删改查、事务、缓存. 把其中的第一部分操作交给了StatementHandler. 这里为什么要使用包 装, 一个类型包装另外一个类型, 是为了符合功能单一原则</p><figure><img src="'+b+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>完成对数据库的操作, 包括了增删改查, 还有批处理, 还有获取SQL, 还有对于SQL参数的处理, 所以他的主要工作就是对 于数据库的操作</p><p>StatementHandler实现类(采用了适配器的设计模式)</p><ul><li>BaseStatementHandler <ul><li>PreparedStatementHandler</li><li>SimpleStatementHandler</li><li>CallableStatementHandler</li></ul></li><li>RoutingStatementHandler</li></ul><p>这里有很浓重的适配器设计模式的痕迹, 会有一个BaseStatementHandler草草的实现一些基础功能</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleStatementHandler</span> <span class="token keyword">extends</span> <span class="token class-name">BaseStatementHandler</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">SimpleStatementHandler</span><span class="token punctuation">(</span><span class="token class-name">Executor</span> executor<span class="token punctuation">,</span> <span class="token class-name">MappedStatement</span> mappedStatement<span class="token punctuation">,</span>
                                  <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">,</span> <span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>executor<span class="token punctuation">,</span> mappedStatement<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Statement</span> statement<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> sql <span class="token operator">=</span> boundSql<span class="token punctuation">.</span><span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> parameterObject <span class="token operator">=</span> boundSql<span class="token punctuation">.</span><span class="token function">getParameterObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">KeyGenerator</span> keyGenerator <span class="token operator">=</span> mappedStatement<span class="token punctuation">.</span><span class="token function">getKeyGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> rows<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>keyGenerator <span class="token keyword">instanceof</span> <span class="token class-name">Jdbc3KeyGenerator</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            statement<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token class-name">Statement</span><span class="token punctuation">.</span><span class="token constant">RETURN_GENERATED_KEYS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            rows <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">getUpdateCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            keyGenerator<span class="token punctuation">.</span><span class="token function">processAfter</span><span class="token punctuation">(</span>executor<span class="token punctuation">,</span> mappedStatement<span class="token punctuation">,</span> statement<span class="token punctuation">,</span> parameterObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>keyGenerator <span class="token keyword">instanceof</span> <span class="token class-name">SelectKeyGenerator</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            statement<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
            rows <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">getUpdateCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            keyGenerator<span class="token punctuation">.</span><span class="token function">processAfter</span><span class="token punctuation">(</span>executor<span class="token punctuation">,</span> mappedStatement<span class="token punctuation">,</span> statement<span class="token punctuation">,</span> parameterObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            statement<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
            rows <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">getUpdateCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> rows<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">batch</span><span class="token punctuation">(</span><span class="token class-name">Statement</span> statement<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> sql <span class="token operator">=</span> boundSql<span class="token punctuation">.</span><span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        statement<span class="token punctuation">.</span><span class="token function">addBatch</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">Statement</span> statement<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">)</span> <span class="token keyword">throws</span>
            <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> sql <span class="token operator">=</span> boundSql<span class="token punctuation">.</span><span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        statement<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> resultSetHandler<span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token function">handleResultSets</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Cursor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryCursor</span><span class="token punctuation">(</span><span class="token class-name">Statement</span> statement<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> sql <span class="token operator">=</span> boundSql<span class="token punctuation">.</span><span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        statement<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> resultSetHandler<span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token function">handleCursorResultSets</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Statement</span> <span class="token function">instantiateStatement</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> connection<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedStatement<span class="token punctuation">.</span><span class="token function">getResultSetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span>mappedStatement<span class="token punctuation">.</span><span class="token function">getResultSetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token class-name">ResultSet</span><span class="token punctuation">.</span><span class="token constant">CONCUR_READ_ONLY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parameterize</span><span class="token punctuation">(</span><span class="token class-name">Statement</span> statement<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token comment">// N/A</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-1-2-3-parameterhandler" tabindex="-1"><a class="header-anchor" href="#_2-1-2-3-parameterhandler" aria-hidden="true">#</a> 2.1.2.3 ParameterHandler</h5><p>功能: 解决的是参数问题, 怎么把Mybatis当中的参数, 最后替换成JDBC当中的参数<br> 目的: Mybatis参数 ------替换成-------&gt; JDBC相关的参数<br> @Param -------换成------------&gt; #{} -----------换成--------&gt; ?<br> 以上的这些功能都是ParameterHandler来做</p><h5 id="_2-1-2-4-resultsethandler" tabindex="-1"><a class="header-anchor" href="#_2-1-2-4-resultsethandler" aria-hidden="true">#</a> 2.1.2.4 ResultSetHandler</h5><p>ResultSetHandler 封装的是JDBC当中的 ResultSet</p><p>目的: 对JDBC中查询结果集ResultSet进行封装</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ResultSetHandler</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这个参数 为什么是Statement</span>
    <span class="token comment">//在JDBC的操作中,我们必须得有Statement,才能获取ResultSet</span>
    <span class="token comment">// 所有的查询结果, 都要和执行的Sql语句息息相关, Statement代表的是Sql语句</span>
    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleResultSets</span><span class="token punctuation">(</span><span class="token class-name">Statement</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Cursor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleCursorResultSets</span><span class="token punctuation">(</span><span class="token class-name">Statement</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">handleOutputParameters</span><span class="token punctuation">(</span><span class="token class-name">CallableStatement</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleResultSets</span><span class="token punctuation">(</span><span class="token class-name">Statement</span> stmt<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在Idea当中如何快速看他的实现类：鼠标放到类名上：Ctrl+Alt+B即可，鼠标翻到方法上，直接Ctrl+Alt+B也可直接到方 法</p></div><h5 id="_2-1-2-5-typehandler-类型处理" tabindex="-1"><a class="header-anchor" href="#_2-1-2-5-typehandler-类型处理" aria-hidden="true">#</a> 2.1.2.5 TypeHandler(类型处理)</h5><p>他的作用就是类型的梳理, 当前我们使用Java程序操作数据库, 这里面管的就是数据库类型和Java类型转换的过程</p><p>类型一定是和参数和返回值息息相关的, 所以, 这个类在两个Handler的下边</p><p>Java程序操作 数据库</p><p>Java类型 数据库类型 String varchar int number .......</p><p>他会和谁发生连带性关系, 一定会和参数和返回值有关系 参数类型 ------------转换为-------------&gt; 数据库类型 返回值 ------ ------转换为-------------&gt; java类型</p><figure><img src="`+S+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',141),h=[q];function f(x,w){return s(),a("div",null,h)}const M=n(y,[["render",f],["__file","Mybatis源码.html.vue"]]);export{M as default};
