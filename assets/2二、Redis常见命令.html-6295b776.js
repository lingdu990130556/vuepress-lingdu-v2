import{_ as i,r as e,o as s,c as a,f as t,h as r,a as l,d as o}from"./app-ac465cee.js";const c={},g=t("h1",{id:"二、redis常见命令",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#二、redis常见命令","aria-hidden":"true"},"#"),r(" 二、Redis常见命令")],-1),y={class:"hint-container tip"},h=t("p",{class:"hint-container-title"},"本文档转载自",-1),x={href:"https://www.oz6.cn/articles/58",target:"_blank",rel:"noopener noreferrer"},u=t("p",null,[t("strong",null,"相关视频")],-1),p=o(`<blockquote><p>我们可以通过Redis的中文文档：http://www.redis.cn/commands.html，来学习各种命令。</p><p>也可以通过菜鸟教程官网来学习：https://www.runoob.com/redis/redis-keys.html</p></blockquote><h2 id="_1-redis数据结构介绍" tabindex="-1"><a class="header-anchor" href="#_1-redis数据结构介绍" aria-hidden="true">#</a> 1.Redis数据结构介绍</h2><blockquote><p><strong>Redis是一个key-value的数据库，key一般是String类型，不过value的类型多种多样</strong></p></blockquote><figure><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/Redis/image-20220524205926164.png" alt="image-20220524205926164" tabindex="0" loading="lazy"><figcaption>image-20220524205926164</figcaption></figure><h2 id="_2-通用命令" tabindex="-1"><a class="header-anchor" href="#_2-通用命令" aria-hidden="true">#</a> 2.通用命令</h2><blockquote><p><strong>通用指令是部分数据类型的，都可以使用的指令，常见的有如下表格所示</strong></p></blockquote><table><thead><tr><th style="text-align:center;">指令</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">KEYS</td><td style="text-align:center;">查看符合模板的所有key，不建议在生产环境设备上使用</td></tr><tr><td style="text-align:center;">DEL</td><td style="text-align:center;">删除一个指定的key</td></tr><tr><td style="text-align:center;">EXISTS</td><td style="text-align:center;">判断key是否存在</td></tr><tr><td style="text-align:center;">EXPIRE</td><td style="text-align:center;">给一个key设置有效期，有效期到期时该key会被自动删除</td></tr><tr><td style="text-align:center;">TTL</td><td style="text-align:center;">查看一个KEY的剩余有效期</td></tr></tbody></table><p><strong>可以通过<code>help [command] </code>可以查看一个命令的具体用法！</strong></p><h2 id="_3-string类型" tabindex="-1"><a class="header-anchor" href="#_3-string类型" aria-hidden="true">#</a> 3.String类型</h2><blockquote><p><strong>String类型，也就是字符串类型，是Redis中最简单的存储类型。</strong></p></blockquote><p>其value是字符串，不过根据字符串的格式不同，又可以分为3类：</p><ul><li><code>string</code>：普通字符串</li><li><code>int</code>：整数类型，可以做自增、自减操作</li><li><code>float</code>：浮点类型，可以做自增、自减操作</li></ul><blockquote><p>不管是哪种格式，底层都是字节数组形式存储，只不过是编码方式不同。字符串类型的最大空间不能超过<strong>512m</strong>.</p></blockquote><table><thead><tr><th style="text-align:center;">KEY</th><th style="text-align:center;">VALUE</th></tr></thead><tbody><tr><td style="text-align:center;">msg</td><td style="text-align:center;">hello world</td></tr><tr><td style="text-align:center;">num</td><td style="text-align:center;">10</td></tr><tr><td style="text-align:center;">score</td><td style="text-align:center;">92.5</td></tr></tbody></table><blockquote><p><strong>String的常见命令有如下表格所示</strong></p></blockquote><table><thead><tr><th style="text-align:center;">命令</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">SET</td><td style="text-align:center;">添加或者修改已经存在的一个String类型的键值对</td></tr><tr><td style="text-align:center;">GET</td><td style="text-align:center;">根据key获取String类型的value</td></tr><tr><td style="text-align:center;">MSET</td><td style="text-align:center;">批量添加多个String类型的键值对</td></tr><tr><td style="text-align:center;">MGET</td><td style="text-align:center;">根据多个key获取多个String类型的value</td></tr><tr><td style="text-align:center;">INCR</td><td style="text-align:center;">让一个整型的key自增1</td></tr><tr><td style="text-align:center;">INCRBY</td><td style="text-align:center;">让一个整型的key自增并指定步长，例如：incrby num 2 让num值自增2</td></tr><tr><td style="text-align:center;">INCRBYFLOAT</td><td style="text-align:center;">让一个浮点类型的数字自增并指定步长</td></tr><tr><td style="text-align:center;">SETNX</td><td style="text-align:center;">添加一个String类型的键值对，前提是这个key不存在，否则不执行</td></tr><tr><td style="text-align:center;"><strong>SETEX</strong></td><td style="text-align:center;">添加一个String类型的键值对，并且指定有效期</td></tr></tbody></table><blockquote><p><strong>Redis的key允许有多个单词形成层级结构，多个单词之间用” ：“隔开，格式如下：</strong></p></blockquote><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>项目名:业务名:类型:id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个格式并非固定，也可以根据自己的需求来删除或添加词条。</p><p>例如我们的项目名称叫 <code>heima</code>，有<code>user</code>和<code>product</code>两种不同类型的数据，我们可以这样定义key：</p><ul><li><strong>user</strong>相关的key：<code>heima:user:1</code></li><li><strong>product</strong>相关的key：<code>heima:product:1</code></li></ul><p>如果Value是一个Java对象，例如一个User对象，则可以将对象序列化为JSON字符串后存储</p><table><thead><tr><th style="text-align:center;">KEY</th><th style="text-align:center;">VALUE</th></tr></thead><tbody><tr><td style="text-align:center;">heima:user:1</td><td style="text-align:center;">{&quot;id&quot;:1, &quot;name&quot;: &quot;Jack&quot;, &quot;age&quot;: 21}</td></tr><tr><td style="text-align:center;">heima:product:1</td><td style="text-align:center;">{&quot;id&quot;:1, &quot;name&quot;: &quot;小米11&quot;, &quot;price&quot;: 4999}</td></tr></tbody></table><h2 id="_4-hash类型" tabindex="-1"><a class="header-anchor" href="#_4-hash类型" aria-hidden="true">#</a> 4.Hash类型</h2><blockquote><p><strong>Hash类型，也叫散列，其value是一个无序字典，类似于Java中的<code>HashMap</code>结构。</strong></p></blockquote><ul><li><p><strong>Hash结构可以将对象中的每个字段独立存储，可以针对单个字段做CRUD</strong><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/Redis/image-20220525001227167.png" alt="" loading="lazy"></p></li><li><p><strong>Hash的常见命令有：</strong></p><table><thead><tr><th style="text-align:center;">命令</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">HSET key field value</td><td style="text-align:center;">添加或者修改hash类型key的field的值</td></tr><tr><td style="text-align:center;">HGET key field</td><td style="text-align:center;">获取一个hash类型key的field的值</td></tr><tr><td style="text-align:center;">HMSET</td><td style="text-align:center;">hmset 和 hset 效果相同 ，4.0之后hmset可以弃用了</td></tr><tr><td style="text-align:center;">HMGET</td><td style="text-align:center;">批量获取多个hash类型key的field的值</td></tr><tr><td style="text-align:center;">HGETALL</td><td style="text-align:center;">获取一个hash类型的key中的所有的field和value</td></tr><tr><td style="text-align:center;">HKEYS</td><td style="text-align:center;">获取一个hash类型的key中的所有的field</td></tr><tr><td style="text-align:center;">HVALS</td><td style="text-align:center;">获取一个hash类型的key中的所有的value</td></tr><tr><td style="text-align:center;">HINCRBY</td><td style="text-align:center;">让一个hash类型key的字段值自增并指定步长</td></tr><tr><td style="text-align:center;">HSETNX</td><td style="text-align:center;">添加一个hash类型的key的field值，前提是这个field不存在，否则不执行</td></tr></tbody></table></li></ul><h2 id="_5-list类型" tabindex="-1"><a class="header-anchor" href="#_5-list类型" aria-hidden="true">#</a> 5.List类型</h2><blockquote><p><strong>Redis中的List类型与Java中的LinkedList类似，可以看做是一个双向链表结构。既可以支持正向检索和也可以支持反向检索。</strong></p></blockquote><p><strong>特征也与<code>LinkedList</code>类似：</strong></p><ul><li>有序</li><li>元素可以重复</li><li>插入和删除快</li><li>查询速度一般</li></ul><p>常用来存储一个有序数据，例如：朋友圈点赞列表，评论列表等.</p><blockquote><p><strong>List的常见命令有</strong></p></blockquote><table><thead><tr><th style="text-align:center;">命令</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">LPUSH key element ...</td><td style="text-align:center;">向列表左侧插入一个或多个元素</td></tr><tr><td style="text-align:center;">LPOP key</td><td style="text-align:center;">移除并返回列表左侧的第一个元素，没有则返回nil</td></tr><tr><td style="text-align:center;"><strong>RPUSH key element ...</strong></td><td style="text-align:center;">向列表右侧插入一个或多个元素</td></tr><tr><td style="text-align:center;">RPOP key</td><td style="text-align:center;">移除并返回列表右侧的第一个元素</td></tr><tr><td style="text-align:center;">LRANGE key star end</td><td style="text-align:center;">返回一段角标范围内的所有元素</td></tr><tr><td style="text-align:center;">BLPOP和BRPOP</td><td style="text-align:center;">与LPOP和RPOP类似，只不过在没有元素时等待指定时间，而不是直接返回nil</td></tr></tbody></table><figure><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/Redis/new.gif" alt="new" tabindex="0" loading="lazy"><figcaption>new</figcaption></figure><blockquote><p><strong>思考问题</strong></p></blockquote><ul><li><p><strong>如何利用List结构模拟一个栈?</strong></p><ul><li>先进后出，入口和出口在同一边</li></ul></li><li><p><strong>如何利用List结构模拟一个队列?</strong></p><ul><li>先进先出，入口和出口在不同边</li></ul></li><li><p><strong>如何利用List结构模拟一个阻塞队列?</strong></p><ul><li>入口和出口在不同边</li><li>出队时采用BLPOP或BRPOP</li></ul></li></ul><h2 id="_6-set类型" tabindex="-1"><a class="header-anchor" href="#_6-set类型" aria-hidden="true">#</a> 6.Set类型</h2><blockquote><p><strong>Redis的Set结构与Java中的HashSet类似，可以看做是一个value为null的HashMap。因为也是一个hash表，因此具备与HashSet类似的特征</strong></p></blockquote><ul><li>无序</li><li>元素不可重复</li><li>查找快</li><li>支持交集、并集、差集等功能</li></ul><blockquote><p><strong>Set的常见命令有</strong></p></blockquote><table><thead><tr><th style="text-align:center;">命令</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">SADD key member ...</td><td style="text-align:center;">向set中添加一个或多个元素</td></tr><tr><td style="text-align:center;">SREM key member ...</td><td style="text-align:center;">移除set中的指定元素</td></tr><tr><td style="text-align:center;">SCARD key</td><td style="text-align:center;">返回set中元素的个数</td></tr><tr><td style="text-align:center;">SISMEMBER key member</td><td style="text-align:center;">判断一个元素是否存在于set中</td></tr><tr><td style="text-align:center;">SMEMBERS</td><td style="text-align:center;">获取set中的所有元素</td></tr><tr><td style="text-align:center;">SINTER key1 key2 ...</td><td style="text-align:center;">求key1与key2的交集</td></tr><tr><td style="text-align:center;">SDIFF key1 key2 ...</td><td style="text-align:center;">求key1与key2的差集</td></tr><tr><td style="text-align:center;">SUNION key1 key2 ..</td><td style="text-align:center;">求key1和key2的并集</td></tr></tbody></table><blockquote><p><strong>交集、差集、并集图示</strong></p></blockquote><figure><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/Redis/image-20220525112632214.png" alt="image-20220525112632214" tabindex="0" loading="lazy"><figcaption>image-20220525112632214</figcaption></figure><h2 id="_7-sortedset类型" tabindex="-1"><a class="header-anchor" href="#_7-sortedset类型" aria-hidden="true">#</a> 7.SortedSet类型</h2><blockquote><p><strong>Redis的SortedSet是一个可排序的set集合，与Java中的TreeSet有些类似，但底层数据结构却差别很大。SortedSet中的每一个元素都带有一个score属性，可以基于score属性对元素排序，底层的实现是一个跳表（SkipList）加 hash表。</strong></p></blockquote><p><strong>SortedSet具备下列特性：</strong></p><ul><li>可排序</li><li>元素不重复</li><li>查询速度快</li></ul><p>因为SortedSet的可排序特性，经常被用来实现排行榜这样的功能。</p><blockquote><p><strong>SortedSet的常见命令有</strong></p></blockquote><table><thead><tr><th style="text-align:center;">命令</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">ZADD key score member</td><td style="text-align:center;">添加一个或多个元素到sorted set ，如果已经存在则更新其score值</td></tr><tr><td style="text-align:center;">ZREM key member</td><td style="text-align:center;">删除sorted set中的一个指定元素</td></tr><tr><td style="text-align:center;">ZSCORE key member</td><td style="text-align:center;">获取sorted set中的指定元素的score值</td></tr><tr><td style="text-align:center;">ZRANK key member</td><td style="text-align:center;">获取sorted set 中的指定元素的排名</td></tr><tr><td style="text-align:center;">ZCARD key</td><td style="text-align:center;">获取sorted set中的元素个数</td></tr><tr><td style="text-align:center;">ZCOUNT key min max</td><td style="text-align:center;">统计score值在给定范围内的所有元素的个数</td></tr><tr><td style="text-align:center;">ZINCRBY key increment member</td><td style="text-align:center;">让sorted set中的指定元素自增，步长为指定的increment值</td></tr><tr><td style="text-align:center;">ZRANGE key min max</td><td style="text-align:center;">按照score排序后，获取指定排名范围内的元素</td></tr><tr><td style="text-align:center;">ZRANGEBYSCORE key min max</td><td style="text-align:center;">按照score排序后，获取指定score范围内的元素</td></tr><tr><td style="text-align:center;">ZDIFF、ZINTER、ZUNION</td><td style="text-align:center;">求差集、交集、并集</td></tr></tbody></table><p><strong>注意：所有的排名默认都是升序，如果要降序则在命令的Z后面添加<code>REV</code>即可</strong></p>`,51);function k(b,m){const n=e("ExternalLinkIcon"),d=e("BiliBili");return s(),a("div",null,[g,t("div",y,[h,t("p",null,[t("a",x,[r("https://www.oz6.cn/articles/58"),l(n)])]),u,l(d,{aid:"766995956",cid:"518596126",ratio:"16",page:"8",time:"2"})]),p])}const _=i(c,[["render",k],["__file","2二、Redis常见命令.html.vue"]]);export{_ as default};
